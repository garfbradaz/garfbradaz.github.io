<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-02-12T21:38:55+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Gareth Bradleys Blog</title><subtitle>garfbradaz new blog, hosted on github. Rambling about coding, running and any other of my ramblings.</subtitle><entry><title type="html">Raspberrypi Cluster Kubernetes</title><link href="http://localhost:4000/blog/2019/02/12/RaspberryPi-Cluster-Kubernetes.html" rel="alternate" type="text/html" title="Raspberrypi Cluster Kubernetes" /><published>2019-02-12T00:00:00+00:00</published><updated>2019-02-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/2019/02/12/RaspberryPi-Cluster-Kubernetes</id><content type="html" xml:base="http://localhost:4000/blog/2019/02/12/RaspberryPi-Cluster-Kubernetes.html">&lt;h2 id=&quot;creating-raspberry-pi-cluster-to-learn-kubernetes&quot;&gt;Creating Raspberry Pi Cluster to Learn Kubernetes&lt;/h2&gt;

&lt;p&gt;In August 2018 I bought some Pi’s tp create a cluster, mainly after reading and watching &lt;a href=&quot;https://blog.alexellis.io/build-your-own-bare-metal-arm-cluster/&quot;&gt;Alex Ellis&lt;/a&gt; and &lt;a href=&quot;https://www.hanselman.com/blog/HowToBuildAKubernetesClusterWithARMRaspberryPiThenRunNETCoreOnOpenFaas.aspx&quot;&gt;Scott Hansleman’s&lt;/a&gt; blogs and videos on the subject, which inspired me to make the purchase. I was running Code Clubs at the time, so I thought this would make a good show and tell as well.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Both Alex and Scott posts were both inspiring and I really wanted to give it ago. Anyway I got the equipment, but work and real-life got in the way and progress was slow. Then in December 2018 I landed a new job, starting in April this year, and they use Kubernetes extensively so I also had another good reason to get it up and running - to learn Kubernetes!&lt;/p&gt;

&lt;p&gt;So this month I finally got it working, including a proper master and node setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Pi-3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There were some pain points, like make sure you set up your static IP’s for your Pi’s (and set them up correctly on your router), and more importantly, set up a static IP &lt;em&gt;for&lt;/em&gt; the router itself. The yellow box is the picture is the &lt;a href=&quot;https://www.amazon.co.uk/gp/product/B073TSK26W/ref=oh_aui_search_asin_title?ie=UTF8&amp;amp;psc=1&quot;&gt;rGL-MT300N-V2 router I went for&lt;/a&gt;  in the end, and the only bit of Hanselmans shopping list from his post, I diverted from.&lt;/p&gt;

&lt;h2 id=&quot;my-sons-love-it&quot;&gt;My Sons love it&lt;/h2&gt;

&lt;p&gt;My two sons love it, as we are building Raspberry Pi robots as well in parallel to this. They are interested in what this is doing and &lt;em&gt;why&lt;/em&gt;. Sparking curiosity in little minds is important, and me just building websites doesn’t get their juices flowing!&lt;/p&gt;

&lt;h2 id=&quot;should-i-do-this&quot;&gt;Should I do this?&lt;/h2&gt;
&lt;p&gt;Yes. :)&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;Whats next?&lt;/h2&gt;

&lt;p&gt;Well, learning Kubernetes itself and running some .NET Core container sites. I would like to see how quick the .NET SDK is for building on the Pi’s now, as I would like to experiment with an local build server.&lt;/p&gt;

&lt;p&gt;Also, Alex is the creator of &lt;a href=&quot;https://www.openfaas.com/&quot;&gt;&lt;em&gt;OpenFaaS&lt;/em&gt;&lt;/a&gt;, a cloud agnostic Serverless solution. Having worked with Azure Functions recently at my current job, I can definitely see why this is a good idea. A Serverless infrastructure &lt;em&gt;without&lt;/em&gt; being tied down to a specific cloud. I want to explore converting a small Web API app to OpenFaaS and experimenting there (I’m actually super excited).&lt;/p&gt;

&lt;p&gt;Lastly, when I restart my Code Clubs up, I would like to do a show and tell with something interesting that includes the cluster. I was thinking about running some OpenFaaS functions that “talk” to my Pi robot I’m building and possibly allow you to control it for example.&lt;/p&gt;

&lt;p&gt;Lots to do before April arrives!&lt;/p&gt;</content><author><name>garfbradaz</name></author><category term="blog" /><category term="raspberrypi" /><category term="kubernetes" /><category term="openfaas" /><summary type="html">Creating Raspberry Pi Cluster to Learn Kubernetes In August 2018 I bought some Pi’s tp create a cluster, mainly after reading and watching Alex Ellis and Scott Hansleman’s blogs and videos on the subject, which inspired me to make the purchase. I was running Code Clubs at the time, so I thought this would make a good show and tell as well.</summary></entry><entry><title type="html">Episode 4 - JSON API using ASP.NET Core, Docker &amp;amp; MongoDB - Docker Part II Docker Compose</title><link href="http://localhost:4000/blog/2018/12/31/Episode-4-JSON-API-ASP.NET-Core-Docker-Compose.html" rel="alternate" type="text/html" title="Episode 4 - JSON API using ASP.NET Core, Docker &amp; MongoDB -  Docker Part II Docker Compose" /><published>2018-12-31T00:00:00+00:00</published><updated>2018-12-31T00:00:00+00:00</updated><id>http://localhost:4000/blog/2018/12/31/Episode-4-JSON-API-ASP.NET-Core-Docker-Compose</id><content type="html" xml:base="http://localhost:4000/blog/2018/12/31/Episode-4-JSON-API-ASP.NET-Core-Docker-Compose.html">&lt;h2 id=&quot;previously-on-dcoding&quot;&gt;Previously on Dcoding&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/blog/2018/12/29/Episode-3-JSON-API-ASP.NET-Core-Docker-Setting-Up-Docker-DockerFiles.html&quot;&gt;Episode 3&lt;/a&gt; I set up our Dockerfiles for creating our &lt;em&gt;Docker Images&lt;/em&gt; for our BookStore app. This will allow us to rapidly test our application as we move forward in later Episodes. Today’s episode is &lt;strong&gt;Docker Part 2: Docking Compose&lt;/strong&gt;. &lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-docker-compose&quot;&gt;What is Docker Compose?&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;official documentation&lt;/a&gt; a good explanation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compose is a tool for defining and running multi-container Docker applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Docker compose allows you to define your &lt;em&gt;services&lt;/em&gt; you need to build and run a full scale application. Think about it, it is not just your application you need. Depending on the type of application you may want:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Database of some sort.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Load Balancer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Web Server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Other applications / APIs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may even want to run your unit/integration testing during your Continuous Integration pipeline (CI). You could do that with Docker and Compose.&lt;/p&gt;

&lt;h2 id=&quot;bookstorewebapi-set-up&quot;&gt;BookStore.WebApi Set up&lt;/h2&gt;

&lt;p&gt;If we take a look at our application for the &lt;em&gt;BookStore.WebApi&lt;/em&gt;, we can see the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/docker-arch.png&quot; alt=&quot;architecture diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see from my quickly drawn up diagram (used &lt;a href=&quot;https://www.microsoft.com/en-gb/p/microsoft-whiteboard/9mspc6mp8fm4?activetab=pivot:overviewtab&quot;&gt;Microsoft Whiteboard&lt;/a&gt;), we have two &lt;em&gt;services&lt;/em&gt; running in containers, 1 for the application and the other for the database (&lt;em&gt;MongoDB&lt;/em&gt;), so we can compose these together using &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;docker-composedevyml&quot;&gt;docker-compose.dev.yml&lt;/h2&gt;

&lt;p&gt;So in  &lt;a href=&quot;/blog/2018/12/19/Episode-2-JSON-API-Dotnet-Core-Docker-Project-Structure.html&quot;&gt;Episode 2&lt;/a&gt; we set up the Project Structure, so change directory to the &lt;code class=&quot;highlighter-rouge&quot;&gt;./docker&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    .
    ├── src
    |   ├── api
    |       |
    |       ├── BookStore.WebApi.csproj
    |       ├── Dockerfile
    ├── tests
    |   ├── integration
    |   ├── unit
    |       ├── BookStore.Tests.csproj
    ├── docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Within that directory, you should have two empty YAML files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;docker-compose.dev.yml&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are concentrating on a &lt;em&gt;Development&lt;/em&gt; environment first, so add the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.dev.yml&lt;/code&gt;. These files help us define the shape of our services and the dependancies they have:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;webapi&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;garfbradaz/bookstoreapi:develop&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;webapi_tutorial_debug&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;buildconfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Debug&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../src/api&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASPNETCORE_ENVIRONMENT=Development&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASPNETCORE_URLS=http://+:5003&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5003:5003&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;27017:27017&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And also, just add the following line to &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file so that when we run &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt; it doesn’t fail:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As in &lt;strong&gt;Episode 3&lt;/strong&gt; lets break this &lt;em&gt;YAML&lt;/em&gt; file down now and what we are declaring. These files are &lt;em&gt;YAML&lt;/em&gt; and following the normal &lt;em&gt;YAML&lt;/em&gt; syntax rules around indenting etc.&lt;/p&gt;

&lt;h3 id=&quot;version&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;version:&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is really important. The currently released version (as of December 2018) is &lt;strong&gt;3(.7)&lt;/strong&gt;. You only have to include the whole number within the &lt;code class=&quot;highlighter-rouge&quot;&gt;version&lt;/code&gt; number field within the YAML file. Each &lt;em&gt;major&lt;/em&gt; upgrade (from 1.x, to 2.x, to 3.x) brings about possible breaking changes, including syntax changes to the YAML structure itself.&lt;/p&gt;

&lt;p&gt;Also the version of Compose relates to the version of the released &lt;em&gt;Docker Engine&lt;/em&gt; so have a good read of the &lt;a href=&quot;https://docs.docker.com/compose/compose-file/compose-versioning/#compatibility-matrix&quot;&gt;Compatibility Matrix&lt;/a&gt;, but usually you pick the latest version.&lt;/p&gt;

&lt;h3 id=&quot;services&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;services:&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/get-started/part3/&quot;&gt;Docker services&lt;/a&gt; is where you define each application. So we have two services defined:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webapi:&lt;/code&gt; which is our ASP.NET Core &lt;em&gt;BookStore.WebApi&lt;/em&gt; application.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mongodb:&lt;/code&gt; which is the back-end data store, &lt;em&gt;MongoDB&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;image&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;image:&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Each service has an &lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt; defined. Mongo’s &lt;a href=&quot;https://hub.docker.com/_/mongo&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mongo:latest&lt;/code&gt;&lt;/a&gt; will be pulled directly from &lt;em&gt;hub.docker.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Our own will be built locally for now (until we publish it later) and its simply called &lt;code class=&quot;highlighter-rouge&quot;&gt;garfbradaz/bookstoreapi:develop&lt;/code&gt;. Note the &lt;em&gt;tag&lt;/em&gt; of &lt;strong&gt;develop&lt;/strong&gt;. We now have denoted our debug image, and we can add things like symbols etc for debugging purposes.&lt;/p&gt;

&lt;h3 id=&quot;container_name&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;container_name:&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is just a nice friendly name for our container. You can see the name when you run &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; after you have run a container.&lt;/p&gt;

&lt;h2 id=&quot;run-your-applications&quot;&gt;Run your applications&lt;/h2&gt;

&lt;p&gt;Docker compose has a command  &lt;code class=&quot;highlighter-rouge&quot;&gt;docker compose up&lt;/code&gt;, which allows you to (re)build, (re)create and attach containers for the service. You run the command using the following (make sure you are in the &lt;code class=&quot;highlighter-rouge&quot;&gt;./docker&lt;/code&gt; directory):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; docker-compose.dev.yml up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command overrides the file (&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;) to &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.dev.yml&lt;/code&gt; and runs &lt;code class=&quot;highlighter-rouge&quot;&gt;up&lt;/code&gt;. The containers will run in detached mode (&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;) and run in the background. We will also (re)build the images (&lt;code class=&quot;highlighter-rouge&quot;&gt;--build&lt;/code&gt;). Because we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; section in our &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.dev.yml&lt;/code&gt; file for our code those values will be used. We set the context (&lt;code class=&quot;highlighter-rouge&quot;&gt;../src/api&lt;/code&gt;) which is the relative directory to the source code we are building (Relative to the &lt;code class=&quot;highlighter-rouge&quot;&gt;./docker&lt;/code&gt; directory), plus tell &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt; the Dockerfile name.&lt;/p&gt;

&lt;p&gt;We also send in some &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; &lt;em&gt;into&lt;/em&gt; the Dockerfile. Currently we ignore these, but we will be coming back to them later in this post.&lt;/p&gt;

&lt;p&gt;Lastly we set some &lt;code class=&quot;highlighter-rouge&quot;&gt;environment&lt;/code&gt; variables for our application/ASP.NET Core to use. Specifically around setting up a &lt;code class=&quot;highlighter-rouge&quot;&gt;Development&lt;/code&gt; environment and HTTP URLs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If we dont set these, our application will try and use HTTPS because that is the default now (which is a good thing). Because we haven’t set any self-signed developer certificates up yet this will become a bit of a pain. We will do it, but to get up and running, we are switching off HTTPS for now.&lt;/p&gt;

&lt;p&gt;We also pull down a &lt;strong&gt;MongoDB&lt;/strong&gt; image and start a new database, listening on port 27017. This is the standard port mapping for MongoDB.&lt;/p&gt;

&lt;p&gt;This command will also create a default network for your applications to live in. Normally named after the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt; is run with a postfix of &lt;strong&gt;default&lt;/strong&gt;. So mine is &lt;code class=&quot;highlighter-rouge&quot;&gt;docker_default&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;check-the-containers-are-running&quot;&gt;Check the containers are running&lt;/h2&gt;

&lt;p&gt;You can now run a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; on your commandline of choice. You should see  your &lt;code class=&quot;highlighter-rouge&quot;&gt;webapi_tutorial_debug&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mongodb&lt;/code&gt; (&lt;strong&gt;Hint:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;container_name&lt;/code&gt; you set in the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.dev.yml&lt;/code&gt; file).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/docker-ps.png&quot; alt=&quot;docker ps&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stop-containers&quot;&gt;Stop containers&lt;/h2&gt;

&lt;p&gt;When you have finished you can clear up your containers by running the following, which will stop and remove the containers networks created for this service:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; docker-compose.dev.yml down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;powershell-scripts-optional&quot;&gt;Powershell Scripts (Optional)&lt;/h2&gt;

&lt;p&gt;I have created two powershell scripts that automate this. You just need to run them in the root of the project:&lt;/p&gt;

&lt;h3 id=&quot;run-containers&quot;&gt;Run containers&lt;/h3&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.\run.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;close-and-clean-containers&quot;&gt;Close and clean containers&lt;/h3&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.\clean.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Powershell Core is now cross platform as well so you can install Powershell Core and use these scripts on Mac and Linux boxes if you wish.&lt;/p&gt;

&lt;h2 id=&quot;debug-arguments&quot;&gt;Debug Arguments&lt;/h2&gt;

&lt;p&gt;Previously I mentioned we set a &lt;code class=&quot;highlighter-rouge&quot;&gt;arg&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;buildconfig&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;. We haven’t used this so far. But we will now. I use this to build a debug version of our ASP.NET Core &lt;em&gt;BookStore.WebApi&lt;/em&gt; app, so we can debug into the container using &lt;em&gt;vsdbg&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Have a read of my article &lt;a href=&quot;/blog/2018/12/13/debug-dotnet-core-in-docker.html&quot;&gt;Debug .NET Core in Docker&lt;/a&gt; about what this is. For this article, change directory to &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/api&lt;/code&gt; and make sure your &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; microsoft/dotnet:2.2-sdk AS build-env&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; buildconfig&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; BookStore.WebApi.csproj .&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . .&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;env
&lt;span class=&quot;k&quot;&gt;RUN if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;buildconfig&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        dotnet publish &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /publish &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; Debug&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        dotnet publish &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /publish &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; Release&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; microsoft/dotnet:2.2-aspnetcore-runtime AS runtime-env&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; buildconfig&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; DEBIAN_FRONTEND noninteractive&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /publish&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=build-env /publish .&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;buildconfig&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-install-recommends&lt;/span&gt; apt-utils &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        apt-get install curl unzip procps mongodb &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://aka.ms/getvsdbgsh | bash /dev/stdin &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; latest &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; /publish/vsdbg&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
        echo &quot;*Whistling*&quot;; \
    fi 
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; DEBIAN_FRONTEND teletype&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [ &quot;dotnet&quot;,&quot;BookStore.WebApi.dll&quot; ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;next-time&quot;&gt;Next time&lt;/h2&gt;

&lt;p&gt;That’s it for today. Remember all code is on &lt;a href=&quot;https://github.com/garfbradaz/webapi-episodes/tree/master/episode-4&quot;&gt;Github&lt;/a&gt; if you want it.&lt;/p&gt;

&lt;p&gt;Now we have our architecture spun up and ready, we can start building some ASP.NET Core code (using C#) to start creating our Models for our &lt;em&gt;BookStore.WebApi&lt;/em&gt;. We will also start creating some unit tests and creating the shape of our API.&lt;/p&gt;</content><author><name>garfbradaz</name></author><category term="blog" /><category term="how-to" /><category term="dotnetcore" /><category term="beginners" /><category term="api" /><category term="docker-compose" /><category term="mongodb" /><summary type="html">Previously on Dcoding In Episode 3 I set up our Dockerfiles for creating our Docker Images for our BookStore app. This will allow us to rapidly test our application as we move forward in later Episodes. Today’s episode is Docker Part 2: Docking Compose.</summary></entry><entry><title type="html">Episode 3 - JSON API using ASP.NET Core, Docker &amp;amp; MongoDB - Docker Part I Dockerfiles</title><link href="http://localhost:4000/blog/2018/12/29/Episode-3-JSON-API-ASP.NET-Core-Docker-Setting-Up-Docker-DockerFiles.html" rel="alternate" type="text/html" title="Episode 3 - JSON API using ASP.NET Core, Docker &amp; MongoDB - Docker Part I  Dockerfiles" /><published>2018-12-29T00:00:00+00:00</published><updated>2018-12-29T00:00:00+00:00</updated><id>http://localhost:4000/blog/2018/12/29/Episode-3-JSON-API-ASP.NET-Core-Docker--Setting-Up-Docker--DockerFiles</id><content type="html" xml:base="http://localhost:4000/blog/2018/12/29/Episode-3-JSON-API-ASP.NET-Core-Docker-Setting-Up-Docker-DockerFiles.html">&lt;h2 id=&quot;previously-on-dcoding&quot;&gt;Previously on Dcoding&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/blog/2018/12/19/Episode-2-JSON-API-Dotnet-Core-Docker-Project-Structure.html&quot;&gt;Episode 2&lt;/a&gt; I set up the project directory structure. Today’s episode is &lt;strong&gt;Docker Part 1: DockerFiles&lt;/strong&gt;. &lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;lets-talk-about-docker&quot;&gt;Lets talk about Docker&lt;/h2&gt;

&lt;p&gt;Firstly before we get into how to set up Docker, I want to get into bigging the big D up! Apart from &lt;em&gt;Visual Studio Code&lt;/em&gt; and &lt;em&gt;WSL&lt;/em&gt;, no other technology has transformed how I develop code in 2018. Yes there are pain points, but once you get through those, then your development experience starts (i dare say it) become a little more blissful.&lt;/p&gt;

&lt;p&gt;I can now pull down pre-developed images of applications, databases, load balancers, webs servers, SDKs build tools, pixie dust (nic: testing you are still reading!), and use them like lego bricks, to build a system, &lt;em&gt;without&lt;/em&gt; installing the binaries on my machine.&lt;/p&gt;

&lt;p&gt;Take this tutorial for example, apart from the .NET SDK installed for the IDE, &lt;em&gt;MongoDB&lt;/em&gt;, &lt;em&gt;nginx&lt;/em&gt; and the &lt;em&gt;dotnet runtime&lt;/em&gt; are all installed via images, for which I can build and throw away when finished. No installation needed on my local development (host) machine. Even SQL Server runs on Linux now, and has a Image to pull down.&lt;/p&gt;

&lt;p&gt;This Lego Brick approach to building software now means I dont need to worry about installing all the tools on my machine, configure those tools and un-install when finished. I can package it all up in a &lt;em&gt;Dockerfile&lt;/em&gt; to use now, later or even on another machine, without polluting my host machine and slowing it down.&lt;/p&gt;

&lt;h3 id=&quot;what-is-docker&quot;&gt;What is Docker?&lt;/h3&gt;

&lt;p&gt;Docker is product that utilises a technology &lt;em&gt;containers&lt;/em&gt;, which have been around in Linux for a while. Containers are isolated/sandboxed processes, which only use the bare minimum binaries needed to run the application &lt;em&gt;within&lt;/em&gt; the container, including the file system. Unlike &lt;em&gt;Virtual Machine&lt;/em&gt; which run a whole operating system, and the bloat around it.&lt;/p&gt;

&lt;p&gt;Now as I was writing this post, &lt;a href=&quot;https://twitter.com/dswersky&quot;&gt;Dave Swersky&lt;/a&gt;, wrote an awesome post on &lt;a href=&quot;https://dev.to/raygun/what-is-docker-and-why-is-it-so-popular-45c7&quot;&gt;What is Docker, and why is it so popular?&lt;/a&gt;. Check that out.&lt;/p&gt;

&lt;h2 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h2&gt;

&lt;p&gt;If this is the first time you have used Docker, or you do not have it installed, check out dockers &lt;a href=&quot;https://www.docker.com/get-started&quot;&gt;getting started&lt;/a&gt; to start your journey. You will need to sign up to Docker Hub(https://hub.docker.com/) as well. Think as hub as the repository for Container Images you can access. Not just Dockers, but the communities as a whole. You may here the term &lt;em&gt;Container Registry&lt;/em&gt; for the Hub as well (You can set up your own private Registries on Azure for example).&lt;/p&gt;

&lt;p&gt;So a couple of commands and terminology we need to clear up, which are useful now before moving forward.&lt;/p&gt;

&lt;h3 id=&quot;help&quot;&gt;Help&lt;/h3&gt;

&lt;p&gt;So the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; command has a nice help facility, so if you want to see a list of docker commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;

&lt;p&gt;A image is the package that includes everything needed to run your application, from the environment, code and configuration. You normally use other companies/communities/developers pre-built images from the hub or &lt;em&gt;base images&lt;/em&gt;, but you can &lt;a href=&quot;https://docs.docker.com/develop/develop-images/baseimages/&quot;&gt;create your own&lt;/a&gt; just as easily.&lt;/p&gt;

&lt;p&gt;If you want to see which images you have on your host machine (your development PC/Mac), then run the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this is all new, then nothing will be listed currently, but when we start building our &lt;em&gt;Dockerfile&lt;/em&gt;, we will come back to the output on what this means.&lt;/p&gt;

&lt;h3 id=&quot;containers&quot;&gt;Containers&lt;/h3&gt;

&lt;p&gt;The container is your image &lt;em&gt;running&lt;/em&gt; in a discrete process. You can have multiple containers running on your host machine. Again there is a command to see what containers are running:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also use the short cut (One I personally use a lot):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;develop-first-dockerfile&quot;&gt;Develop first Dockerfile&lt;/h2&gt;

&lt;p&gt;What is a Dockerfile then? Here is a good description from Docker &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#usage&quot;&gt;themselves&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Docker can build images automatically by reading the instructions from a Dockerfile. A Dockerfile is a text
document that contains all the commands a user could call on the command line to assemble an image. Using docker
build users can create an automated build that executes several command-line instructions in succession.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To begin with, we will build our first Dockerfile to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compile our .NET Core Web API for the BookStore.&lt;/li&gt;
  &lt;li&gt;Run our .NET Core Web API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We call &lt;em&gt;Dockerfiles&lt;/em&gt; that do more than one thing, &lt;em&gt;multi-stage&lt;/em&gt; builds. They allow us to &lt;em&gt;build&lt;/em&gt; and &lt;em&gt;run&lt;/em&gt; without maintaining separate Dockerfiles (which was the case once upon a time). Because I don’t learn this stuff on my own, let me link to &lt;a href=&quot;https://blog.alexellis.io/mutli-stage-docker-builds/&quot;&gt;Alex Ellis&lt;/a&gt; talking more about this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Future Post:&lt;/strong&gt; While I’m chatting about Alex, in the future I will be refactoring this &lt;strong&gt;BookStore.App&lt;/strong&gt; to use &lt;a href=&quot;https://www.openfaas.com/&quot;&gt;OpenFaaS&lt;/a&gt; an open source serverless architecture that &lt;em&gt;isn’t&lt;/em&gt; coupled to one particular cloud. I’m excited about this, as I have wanted to use this tech for a while now, I even have the Raspberry Pis to cluster…..&lt;/p&gt;

&lt;p&gt;So, back to the matter at hand. Firstly we need to &lt;em&gt;change directory&lt;/em&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;src/api&lt;/code&gt; directory we set up in &lt;a href=&quot;/blog/2018/12/19/Episode-2-JSON-API-Dotnet-Core-Docker-Project-Structure.html&quot;&gt;Episode 2&lt;/a&gt;. Just to recap we set up the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    .
    ├── src
    |   ├── api
    |       |
    |       ├── BookStore.WebApi.csproj
    ├── tests
    |   ├── integration
    |   ├── unit
    |       ├── BookStore.Tests.csproj
    ├── docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; in the root of &lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    .
    ├── src
    |   ├── api
    |       |
    |       ├── BookStore.WebApi.csproj
    |       ├── Dockerfile
    ├── tests
    |   ├── integration
    |   ├── unit
    |       ├── BookStore.Tests.csproj
    ├── docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the following to the file:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; microsoft/dotnet:2.2-sdk AS build-env&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; BookStore.WebApi.csproj .&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . .&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;dotnet publish &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; Release &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /publish

&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; microsoft/dotnet:2.2-aspnetcore-runtime AS runtime-env&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /publish&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 5000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=build-env /publish .&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [ &quot;dotnet&quot;,&quot;BookStore.WebApi.dll&quot; ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this is new to you, then let me explain the format on this file and what it means.&lt;/p&gt;

&lt;h3 id=&quot;from&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This statement sets the &lt;em&gt;base image&lt;/em&gt; created by Microsoft (or any organisation who has created an base image) and creates a new build stage (each &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; creates a new stage). These images will live on a public repository like &lt;em&gt;hub.docker.com&lt;/em&gt;. So make sure you have logged in via &lt;em&gt;Docker Desktop&lt;/em&gt; otherwise the first build step will fail.&lt;/p&gt;

&lt;p&gt;Having multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; denotes a multi-stage Dockerfile.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/microsoft/dotnet/&quot;&gt;microsoft/dotnet:2.2-sdk&lt;/a&gt; - SDK image. This base image is designed to allow you to build/publish using the &lt;em&gt;dotnet CLI&lt;/em&gt;. As you can see I’m using the 2.2 .NET Core Version (denoted the common tag name of &lt;strong&gt;:2.2-sdk&lt;/strong&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/microsoft/dotnet/&quot;&gt;microsoft/dotnet:2.2-aspnetcore-runtime&lt;/a&gt; - Runtime image. This base image is designed to run a ASP.NET Core application using the &lt;em&gt;dotnet runtime&lt;/em&gt;. Again it follows the same format with denoting the dotnet version by the common tag of &lt;strong&gt;:2.2-aspnetcore-runtime&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;workdir&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This statement will create a directory for the following statements will work in. If the directory exists, then the directory is just set to the value in &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt;. In our case &lt;code class=&quot;highlighter-rouge&quot;&gt;/app&lt;/code&gt; is created by the command and &lt;code class=&quot;highlighter-rouge&quot;&gt;/publish&lt;/code&gt; is set to (as publish is created in the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet publish&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;copy&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This statement will copy the files specified &lt;em&gt;into&lt;/em&gt; the containers file system (normally into the file system specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt;) from the host machine of the directory where the Dockerfile is placed. So in our instance, the &lt;code class=&quot;highlighter-rouge&quot;&gt;../src/api&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We have two &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; commands in the build stage of our Dockerfile context. We do this for the &lt;strong&gt;BookStore.WebApi.csproj&lt;/strong&gt; so that we have a build cache entry for this file, so if it hasn’t changed, we dont copy it on every build (reduces build times).  Also &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY . .&lt;/code&gt; will copy everything else.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;COPY BookStore.WebApi.csproj .
COPY . .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our 2nd stage actually copies the output from &lt;code class=&quot;highlighter-rouge&quot;&gt;build-env&lt;/code&gt; &lt;strong&gt;/publish&lt;/strong&gt; directory into the next stage.&lt;/p&gt;

&lt;h3 id=&quot;run&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This statement will run a set of commands that will create another layer in your image and commit the results, which will form part of the container. It allows you to set up your container before running it.&lt;/p&gt;

&lt;p&gt;Our example is the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet publish&lt;/code&gt; will be &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; as part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt; instruction set, creating the binaries to use when we &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; using the published &lt;code class=&quot;highlighter-rouge&quot;&gt;.dll&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;entrypoint&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This statement defines what is run when you &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; and start the container. Our &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; runs the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; command using our published &lt;code class=&quot;highlighter-rouge&quot;&gt;.dll&lt;/code&gt;. You can pass more parameters into the &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt; command via &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our multi-stage Dockerfile builds our source code in the first stage and copies the published output so that it is run using the &lt;em&gt;.NET Core Runetime&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;build-the-image&quot;&gt;Build the Image&lt;/h2&gt;

&lt;p&gt;Now we have a Dockerfile, we can build this file into an &lt;em&gt;image&lt;/em&gt; which will be stored locally on our host. Make sure you are on the commandline of choice, and change directory to &lt;code class=&quot;highlighter-rouge&quot;&gt;../src/api&lt;/code&gt; and run the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; garfbradaz/ep3-api &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command will run a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt;. The “.” signifies you want to use the &lt;em&gt;Dockerfile&lt;/em&gt; in the current directory and &lt;code class=&quot;highlighter-rouge&quot;&gt;-t garfbradaz/ep3-api&lt;/code&gt; is a parameter that will build an Image with a &lt;strong&gt;[-]t&lt;/strong&gt;ag name of &lt;em&gt;garfbradaz/ep3-api&lt;/em&gt;. You can replace this string with anything you want.&lt;/p&gt;

&lt;p&gt;The first time you run this will take a while, because there will be no &lt;em&gt;cache entries&lt;/em&gt; from previous builds for your layers. You can also see all the layers that are built from the Microsoft &lt;em&gt;base images&lt;/em&gt; which are made up of layers also:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/docker-net-layers.PNG&quot; alt=&quot;docker-net-layers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you run a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt; again you will now see your image has been built (plus the .NET Core Images):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/dotnet-net-images.PNG&quot; alt=&quot;dotnet-net-images&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;run-the-image-as-a-container&quot;&gt;Run the Image as a Container&lt;/h3&gt;

&lt;p&gt;So, we have created a &lt;em&gt;Dockerfile&lt;/em&gt; that includes the steps to build an image, which includes the resources needed to run the application within a &lt;em&gt;container&lt;/em&gt;. This is the magic, as we can run this image on any OS that supports Docker itself (If we are building &lt;em&gt;Linux&lt;/em&gt; containers).&lt;/p&gt;

&lt;p&gt;So the following will run your container as isolated/sandboxed process:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--env&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ASPNETCORE_ENVIRONMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Development &lt;span class=&quot;nt&quot;&gt;--env&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ASPNETCORE_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://+:5000 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5000:5000 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt;  garfbradaz/ep3-api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command will run your Container interactively (&lt;code class=&quot;highlighter-rouge&quot;&gt;-it&lt;/code&gt;), and override some environment variables (&lt;code class=&quot;highlighter-rouge&quot;&gt;--env&lt;/code&gt;); overriding port mapping to 5000 (&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;) and clean up the container with finished (&lt;code class=&quot;highlighter-rouge&quot;&gt;--rm&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I use Powershell to validate the container is running fine, but you can use &lt;em&gt;postman&lt;/em&gt; (we explore setting this up in another chapter).&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Invoke-RestMethod&lt;/span&gt; -Uri http://localhost:5000/api/values -Method &lt;span class=&quot;s1&quot;&gt;'Get'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should fail with a 401 status, because we set up the &lt;code class=&quot;highlighter-rouge&quot;&gt;[Authorize]&lt;/code&gt; attribute against the &lt;code class=&quot;highlighter-rouge&quot;&gt;ValuesController.cs&lt;/code&gt;.  But at least this proves we are hitting the Web API running using Kestrel within the Container process.&lt;/p&gt;

&lt;h3 id=&quot;next-time&quot;&gt;Next time&lt;/h3&gt;

&lt;p&gt;We will be exploring &lt;code class=&quot;highlighter-rouge&quot;&gt;docker compose&lt;/code&gt; to allow us to run and knit together multiple containers together so we can interact with MongoDB for example.&lt;/p&gt;</content><author><name>garfbradaz</name></author><category term="blog" /><category term="how-to" /><category term="dotnet-core" /><category term="beginners" /><category term="api" /><category term="dockerfiles" /><summary type="html">Previously on Dcoding In Episode 2 I set up the project directory structure. Today’s episode is Docker Part 1: DockerFiles.</summary></entry><entry><title type="html">Release Notes - Update 1</title><link href="http://localhost:4000/blog/2018/12/29/release-notes-update-1-garfbradaz-blog.html" rel="alternate" type="text/html" title="Release Notes - Update 1" /><published>2018-12-29T00:00:00+00:00</published><updated>2018-12-29T00:00:00+00:00</updated><id>http://localhost:4000/blog/2018/12/29/release-notes-update-1-garfbradaz-blog</id><content type="html" xml:base="http://localhost:4000/blog/2018/12/29/release-notes-update-1-garfbradaz-blog.html">&lt;h2 id=&quot;release-notes---update-1&quot;&gt;Release Notes - Update 1&lt;/h2&gt;

&lt;p&gt;Whenever I do an update to this blog itself, I will be providing some Release Notes on changes, including where possible, what I have done, as this may be helpful to someone else. &lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;version-notes&quot;&gt;Version Notes&lt;/h3&gt;

&lt;p&gt;I was going to use a proper Semantic Version (SemVer) for the site, but decided just to do incremental number releases (like Chrome). Just, well because!. No other reason than ease.&lt;/p&gt;

&lt;h3 id=&quot;blog-post-comments&quot;&gt;Blog Post Comments&lt;/h3&gt;

&lt;p&gt;I have now switched on comments using the service &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; for which you can sign up for free. Because Jekyll doesn’t have a back end data store, this made the most sense to me (&amp;amp; Disqus has good support).&lt;/p&gt;

&lt;p&gt;How did I do it? Well this is my site, so you may need to add it different places depending on your site structure, &lt;strong&gt;but&lt;/strong&gt; I followed the standard &lt;em&gt;Jekyll&lt;/em&gt; site creation for Github Pages, the structure is what I would call &lt;strong&gt;vanilla&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Sign up to Disqus.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Take note of the the &lt;em&gt;shortname&lt;/em&gt; you create for your site.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Edit your &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; and add the following:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;disqus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;shortname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;replace-with-your-short-name&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;comments.html&lt;/code&gt; and and save it to your &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory with the following snippet. This is the embedded code provided by Disqus:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;comments&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disqus_thread&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_shortname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'garfbradaz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'script'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/javascript'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'//'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_shortname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.disqus.com/embed.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'head'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;    
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://disqus.com/?ref_noscript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;comments powered by Disqus.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Add a reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;comments.html&lt;/code&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;posts.html&lt;/code&gt;. Add the following to the bottom of the &lt;code class=&quot;highlighter-rouge&quot;&gt;posts.html&lt;/code&gt; (or whatever your HTMl file is called):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/include-comments.png&quot; alt=&quot;include-comments&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to turn a comment &lt;strong&gt;on&lt;/strong&gt; using the following Front Matter value in each post file:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;comments: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Rebuild your posts:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Voila, you will have a nice comment at the bottom of your page:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/disqus.png&quot; alt=&quot;disqus&quot; /&gt;&lt;/p&gt;</content><author><name>garfbradaz</name></author><category term="blog" /><category term="release-notes" /><category term="disqus" /><summary type="html">Release Notes - Update 1 Whenever I do an update to this blog itself, I will be providing some Release Notes on changes, including where possible, what I have done, as this may be helpful to someone else.</summary></entry><entry><title type="html">Episode 2 - JSON API using ASP.NET Core, Docker &amp;amp; MongoDB - Project Structure</title><link href="http://localhost:4000/blog/2018/12/19/Episode-2-JSON-API-Dotnet-Core-Docker-Project-Structure.html" rel="alternate" type="text/html" title="Episode 2 - JSON API using ASP.NET Core, Docker &amp;  MongoDB -  Project Structure" /><published>2018-12-19T00:00:00+00:00</published><updated>2018-12-19T00:00:00+00:00</updated><id>http://localhost:4000/blog/2018/12/19/Episode-2-JSON-API-Dotnet-Core-Docker---Project-Structure</id><content type="html" xml:base="http://localhost:4000/blog/2018/12/19/Episode-2-JSON-API-Dotnet-Core-Docker-Project-Structure.html">&lt;h2 id=&quot;previously-on-decoding&quot;&gt;Previously on Decoding&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/blog/2018/12/18/Episode-1-json-api-dotnet-core-docker.html&quot;&gt;Episode 1&lt;/a&gt; I set the scene for what this series will contain. Today’s episode is simply on setting your &lt;em&gt;directory&lt;/em&gt; structure and creating the relevant projects. &lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;directory-structure&quot;&gt;Directory Structure&lt;/h2&gt;

&lt;p&gt;Firstly, create a directory structure for your &lt;em&gt;Source (src)&lt;/em&gt; where our &lt;strong&gt;dotnet projects&lt;/strong&gt; will be saved, &lt;em&gt;tests&lt;/em&gt; will hold our &lt;strong&gt;Unit&lt;/strong&gt; and &lt;strong&gt;Integration&lt;/strong&gt; tests and lastly, &lt;em&gt;docker&lt;/em&gt; which will hold our &lt;strong&gt;docker-compose&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    .
    ├── src
    ├── tests
    ├── docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;src&quot;&gt;Src&lt;/h3&gt;

&lt;p&gt;Change directory to &lt;em&gt;src&lt;/em&gt; and we will run the following &lt;em&gt;dotnet&lt;/em&gt; command to new up a Project. Before we move on any further and do that though, lets talk about &lt;em&gt;dotnet new&lt;/em&gt; for people who have not used it.&lt;/p&gt;

&lt;p&gt;This command will create a dotnet project based off a default project template. You get a bunch of defaults with the SDK (&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/tutorials/create-custom-template&quot;&gt;and you can create your own&lt;/a&gt;. Run the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will give you a list of available templates you can use:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/ep2-dotnet-new.png&quot; alt=&quot;templates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take note of the &lt;em&gt;short name&lt;/em&gt; as this is what we will be using next. So now we know what &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet new&lt;/code&gt; does, lets create the project:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new webapi &lt;span class=&quot;nt&quot;&gt;--auth&lt;/span&gt; Individual &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; api &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; BookStore.WebApi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create a folder with the name &lt;em&gt;api&lt;/em&gt; and in it will create a new &lt;em&gt;webapi&lt;/em&gt; project using authentication (we will explore this more in a later episode). The project will be called &lt;em&gt;BookStore.WebApi&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; You can do a &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet new webapi --help&lt;/code&gt; and see all the available switches for that short name.&lt;/p&gt;

&lt;p&gt;Your directory structure should look like this now:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    .
    ├── src
    |   ├── api
    |       |
    |       ├── BookStore.WebApi
    ├── tests
    ├── docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tests&quot;&gt;Tests&lt;/h3&gt;

&lt;p&gt;Change directory to the &lt;em&gt;tests&lt;/em&gt; folder. Firstly mainly create a &lt;em&gt;integration&lt;/em&gt; test folder. These will hold our &lt;strong&gt;Postman&lt;/strong&gt; tests (again for another episode). Secondly, we need to create our Unit Test project. I will be using &lt;em&gt;Xunit&lt;/em&gt;, but as you can see, there were a few different projects for testing when you did a &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet new --help&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new xunit &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; unit &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; BookStore.Tests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again this will create a &lt;em&gt;xunit&lt;/em&gt; project type within a folder called &lt;em&gt;unit&lt;/em&gt;. The project name will be &lt;em&gt;BookStore.Tests&lt;/em&gt;. Within the &lt;em&gt;integration&lt;/em&gt; folder just add an empty &lt;strong&gt;postman.json&lt;/strong&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    .
    ├── src
    |   ├── api
    |       |
    |       ├── BookStore.WebApi.csproj
    ├── tests
    |   ├── integration
    |   ├── unit
    |       ├── BookStore.Tests.csproj
    ├── docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;/h3&gt;

&lt;p&gt;Change directory to &lt;em&gt;docker&lt;/em&gt; folder and for now just create two empty files:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker-compose.yml&lt;/p&gt;

  &lt;p&gt;docker-compose.dev.yml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes you guessed it, this files will become apparent (and fatter) in a future episode.&lt;/p&gt;

&lt;h2 id=&quot;next-time&quot;&gt;Next time&lt;/h2&gt;

&lt;p&gt;So now we have set up our Project directory structure, we can move on to setting up our &lt;strong&gt;Docker&lt;/strong&gt; environment, using &lt;em&gt;Dockerfiles&lt;/em&gt; and &lt;em&gt;docker-compose&lt;/em&gt;. Join me next time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; Episode 2 can be found on my &lt;a href=&quot;https://github.com/garfbradaz/webapi-episodes&quot;&gt;Github Repository&lt;/a&gt;&lt;/p&gt;</content><author><name>garfbradaz</name></author><category term="blog" /><category term="how-to" /><category term="dotnet-core" /><category term="beginners" /><category term="api" /><summary type="html">Previously on Decoding In Episode 1 I set the scene for what this series will contain. Today’s episode is simply on setting your directory structure and creating the relevant projects.</summary></entry><entry><title type="html">Episode 1 - JSON API using ASP.NET Core, Docker &amp;amp; MongoDB</title><link href="http://localhost:4000/blog/2018/12/18/Episode-1-json-api-dotnet-core-docker.html" rel="alternate" type="text/html" title="Episode 1 - JSON API using ASP.NET Core, Docker &amp; MongoDB" /><published>2018-12-18T00:00:00+00:00</published><updated>2018-12-18T00:00:00+00:00</updated><id>http://localhost:4000/blog/2018/12/18/Episode-1-json-api-dotnet-core-docker</id><content type="html" xml:base="http://localhost:4000/blog/2018/12/18/Episode-1-json-api-dotnet-core-docker.html">&lt;h2 id=&quot;inspiration&quot;&gt;Inspiration&lt;/h2&gt;

&lt;p&gt;There is a series on &lt;a href=&quot;https://dev.o&quot;&gt;dev.to&lt;/a&gt; that I have followed by &lt;a href=&quot;https://dev.to/nathanabland&quot;&gt;Nathan Bland&lt;/a&gt; who has recorded as series of videos around creating a JSON API, using &lt;em&gt;Node.js&lt;/em&gt;, &lt;em&gt;docker&lt;/em&gt; and &lt;em&gt;Express&lt;/em&gt;. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;I liked the idea around this, so I’m going to do the same, but in a blog style, but replacing &lt;em&gt;Node.js&lt;/em&gt; and &lt;em&gt;Express&lt;/em&gt; with &lt;em&gt;ASP.NET Core WebAPI&lt;/em&gt;. I also want to use a MongoDB as a the backend.&lt;/p&gt;

&lt;h2 id=&quot;set-the-scene&quot;&gt;Set the Scene&lt;/h2&gt;

&lt;p&gt;The API itself will be for a &lt;em&gt;Book Shop Chain&lt;/em&gt; who want to expose their stores and titles via a public RESTful service for other companies to use. This can be used for stock lookups and to see which stores have stock available to sell.&lt;/p&gt;

&lt;p&gt;Here are some example Epics to show the shape of the API needed:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a &lt;em&gt;book store&lt;/em&gt;
I can &lt;em&gt;add&lt;/em&gt; our &lt;em&gt;store&lt;/em&gt; to the database
&lt;em&gt;So&lt;/em&gt; we can be accessible&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a &lt;em&gt;book store&lt;/em&gt;
I can &lt;em&gt;add&lt;/em&gt; our &lt;em&gt;inventory&lt;/em&gt; to our database
&lt;em&gt;So&lt;/em&gt; we can expose our inventory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a &lt;em&gt;book store&lt;/em&gt;
We can &lt;em&gt;update&lt;/em&gt; a books stock level
&lt;em&gt;For&lt;/em&gt; an accurate stock level&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a &lt;em&gt;API consumer&lt;/em&gt;
I can look up a &lt;em&gt;stores address&lt;/em&gt;
&lt;em&gt;So&lt;/em&gt; we know where to buy a &lt;em&gt;book&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a &lt;em&gt;API consumer&lt;/em&gt;
I can look up a &lt;em&gt;book&lt;/em&gt;
&lt;em&gt;So&lt;/em&gt; we can get a &lt;em&gt;list&lt;/em&gt; of &lt;em&gt;stores&lt;/em&gt; who sell a
&lt;em&gt;book&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As &lt;em&gt;book store IT Security&lt;/em&gt;
We can add &lt;em&gt;API Keys&lt;/em&gt; to the API
&lt;em&gt;For&lt;/em&gt; API Consumers to use when querying the API&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-to-expect&quot;&gt;What to expect&lt;/h2&gt;

&lt;p&gt;My plan is to release weekly blog posts covering in a similar fashion like Nathan’s:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setting up your .NET Core Project Structure.&lt;/li&gt;
  &lt;li&gt;Setting up docker environment using docker-compose.&lt;/li&gt;
  &lt;li&gt;Modelling API JSON back end using Mongo.&lt;/li&gt;
  &lt;li&gt;Modelling API using Swagger.&lt;/li&gt;
  &lt;li&gt;Unit Tests with Xunit.&lt;/li&gt;
  &lt;li&gt;Integration Tests with Postman.&lt;/li&gt;
  &lt;li&gt;Skeleton Book Store API (Routes etc).&lt;/li&gt;
  &lt;li&gt;Skeleton Inventory API (Routes etc).&lt;/li&gt;
  &lt;li&gt;Securing your API.&lt;/li&gt;
  &lt;li&gt;Data validation.&lt;/li&gt;
  &lt;li&gt;Pagination for large data queries.&lt;/li&gt;
  &lt;li&gt;Filter and Search.&lt;/li&gt;
  &lt;li&gt;Hooking up to Azure Dev Ops for Build and Release Pipeline.&lt;/li&gt;
  &lt;li&gt;Publisher Swagger Documentation on Github.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will post any code on Github as well.&lt;/p&gt;

&lt;h2 id=&quot;start-at-zero&quot;&gt;Start at Zero&lt;/h2&gt;

&lt;p&gt;So before starting cracking on with this, make sure your environment is set up. Because this is &lt;em&gt;.NET Core&lt;/em&gt;, this is cross platform, so if you own a Mac or Linux box, feel free to join in. I’m going to be building this on a &lt;em&gt;Surface Book&lt;/em&gt;, but I will try to be a good Xpat-Citizen and test across environments.&lt;/p&gt;

&lt;p&gt;Please make sure the following is installed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dotnet.microsoft.com/download&quot;&gt;Dotnet Core &lt;/a&gt; - I’m currently using 2.2.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/get-started&quot;&gt;Docker&lt;/a&gt; - You will need to also create a login for &lt;a href=&quot;https://hub.docker.com/signup&quot;&gt;Docker Hub&lt;/a&gt; if you do not have one.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-gb/powershell/scripting/overview?view=powershell-6&quot;&gt;Powershell Core&lt;/a&gt; - PowerShell Core is cross-platform and runs on Windows, Linux, and MacOS while the old one runs on Windows only(CLI). There are options to install on the OS of choice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We wont need to install Mongo as we will be running it using &lt;em&gt;Docker&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ide&quot;&gt;IDE&lt;/h2&gt;

&lt;p&gt;I will be using &lt;em&gt;Visual Studio Code&lt;/em&gt; for cross platform .NET Core support. I use a bunch of extension which I have put here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/garfbradaz/be010080df076d19892bf4ec71127b53&quot;&gt;https://gist.github.com/garfbradaz/be010080df076d19892bf4ec71127b53&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can import these using the following &lt;em&gt;Settings Sync&lt;/em&gt; extension on the marketplace:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync&quot;&gt;https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you already use &lt;em&gt;VSCode&lt;/em&gt;, you may just want to find the &lt;em&gt;C#&lt;/em&gt;, &lt;em&gt;Docker&lt;/em&gt; &lt;em&gt;GitLens&lt;/em&gt; and &lt;em&gt;.NET Core Test Explorer&lt;/em&gt; &lt;a href=&quot;https://code.visualstudio.com/docs/editor/extension-gallery&quot;&gt;extensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;My list contains extensions like &lt;em&gt;Jekyll&lt;/em&gt; support which you wont need for this.&lt;/p&gt;

&lt;h2 id=&quot;next-time&quot;&gt;Next time&lt;/h2&gt;

&lt;p&gt;We will create the &lt;em&gt;ASP.NET Core WebAPI&lt;/em&gt; template, set up the project structure. Join me next time!.&lt;/p&gt;</content><author><name>garfbradaz</name></author><category term="blog" /><category term="how-to" /><category term="dotnet-core" /><category term="beginners" /><category term="api" /><summary type="html">Inspiration There is a series on dev.to that I have followed by Nathan Bland who has recorded as series of videos around creating a JSON API, using Node.js, docker and Express.</summary></entry><entry><title type="html">Debug .NET Core in Docker using Visual Studio Code</title><link href="http://localhost:4000/blog/2018/12/13/debug-dotnet-core-in-docker.html" rel="alternate" type="text/html" title="Debug .NET Core in Docker using Visual Studio Code" /><published>2018-12-13T00:00:00+00:00</published><updated>2018-12-13T00:00:00+00:00</updated><id>http://localhost:4000/blog/2018/12/13/debug-dotnet-core-in-docker</id><content type="html" xml:base="http://localhost:4000/blog/2018/12/13/debug-dotnet-core-in-docker.html">&lt;h2 id=&quot;debugging-aspnet-core-in-a-linux-docker-with-visual-studio-code&quot;&gt;Debugging ASP.NET Core in a Linux Docker with Visual Studio Code&lt;/h2&gt;

&lt;p&gt;So, you have started using Docker for your .NET Core applications - awesome news. You are using Linux Containers, and Visual Studio Code, and you then go to Debug your container…..oh. &lt;!--more--&gt; (I’m using Windows).&lt;/p&gt;

&lt;p&gt;Its not the most straight forward process I have found, if you are looking at getting this up and running. Firstly I didn’t figure this out on my own, the reason I’m blogging about it is because I meshed together the knowledge I had, plus these very informative posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jonathanchannon.com/2017/06/07/debugging-netcore-docker/&quot;&gt;Jonathan Channon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.richard-banks.org/2018/07/debugging-core-in-docker.html&quot;&gt;Richard Banks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was the above two posts that glued it together for me.  Have a good read of those as well. Before we go any further, just to confirm these instructions are for &lt;em&gt;Visual Studio Code&lt;/em&gt; and &lt;em&gt;Linux Containers&lt;/em&gt; using &lt;em&gt;Docker Compose&lt;/em&gt;, I’m not sure how this is set-up on Visual Studio. I’m presuming you have &lt;em&gt;VSCode&lt;/em&gt;, &lt;em&gt;Docker&lt;/em&gt; and &lt;em&gt;.NET Core SDK&lt;/em&gt; installed. And you are using Linux Containers.&lt;/p&gt;

&lt;h2 id=&quot;dockerfile&quot;&gt;DockerFile&lt;/h2&gt;

&lt;p&gt;Firstly lets look at my multi-staged (Multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;) Dockerfile for building my project.&lt;/p&gt;

&lt;h3 id=&quot;1st-stage-build&quot;&gt;1st Stage Build&lt;/h3&gt;

&lt;p&gt;The first part of the Dockerfile &lt;code class=&quot;highlighter-rouge&quot;&gt;build-env&lt;/code&gt; stage, takes an &lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;buildconfig&lt;/code&gt;, which controls how the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet publish&lt;/code&gt; is configured. And yes I know, I have a todo item to refactor the if/else to just pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;buildconfig&lt;/code&gt; as a &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; value.&lt;/p&gt;

&lt;h3 id=&quot;2nd-stage-run&quot;&gt;2nd Stage Run&lt;/h3&gt;

&lt;p&gt;So the 1st stage handled the build, the 2nd handles the running of the Web API project. As you can see, there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt; switch again, to install some dependencies when running in &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;. Ignore the &lt;strong&gt;mongo&lt;/strong&gt; installs, it is the &lt;em&gt;vsdbg&lt;/em&gt; installation We are interested in.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl -sSL https://aka.ms/getvsdbgsh | bash /dev/stdin -v latest -l&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;The debugger platform has been expanded between Visual Studio 2017 15.3 and
previous versions of Visual Studio. Visual Studio can now communicate using
the debug adapter protocol which is used by Visual Studio, Visual Studio Code
and Visual Studio for Mac. This protocol is now used for debugging
cross-platform .NET Core applications.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/MIEngine/wiki/Offroad-Debugging-of-.NET-Core-on-Linux---OSX-from-Visual-Studio&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So vsdbg is installed &lt;strong&gt;into&lt;/strong&gt; the container to allow remote debugging from your host machine using Visual Studio Code.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;FROM microsoft/dotnet:2.2-sdk AS build-env&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ARG buildconfig&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;WORKDIR /app&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY ServiceApp.WebApi.csproj .&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN dotnet restore&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY . .&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN if [ &quot;${buildconfig}&quot; = &quot;Debug&quot; ]; then \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;dotnet publish -o /publish -c Debug; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;else \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;dotnet publish -o /publish -c Release; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;FROM microsoft/dotnet:2.2-aspnetcore-runtime&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ARG buildconfig&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENV DEBIAN_FRONTEND noninteractive&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;WORKDIR /publish&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY --from=build-env /publish .&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN if [ &quot;${buildconfig}&quot; = &quot;Debug&quot; ]; then \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;apt-get update &amp;amp;&amp;amp; \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;apt-get install -y --no-install-recommends apt-utils &amp;amp;&amp;amp; \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;apt-get install curl unzip procps mongodb -y &amp;amp;&amp;amp; \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;curl -sSL https://aka.ms/getvsdbgsh | bash /dev/stdin -v latest -l /publish/vsdbg; \&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;else \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;echo &quot;*Whistling*&quot;; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENV DEBIAN_FRONTEND teletype&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENTRYPOINT [ &quot;dotnet&quot;,&quot;ServiceApp.WebApi.dll&quot; ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;launch-task-configuration-for-visual-studio-code&quot;&gt;Launch Task Configuration for Visual Studio Code&lt;/h2&gt;

&lt;p&gt;So this was the bit I struggled with, to the point I &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-vscode/issues/2724&quot;&gt;logged a Github Issue&lt;/a&gt; and subsequently had a light bulb moment afterwards!&lt;/p&gt;

&lt;p&gt;Both Jonathan and Richards work and investigations for their posts, again helped tenfold.&lt;/p&gt;

&lt;p&gt;Important bits are the &lt;code class=&quot;highlighter-rouge&quot;&gt;sourceFileMap&lt;/code&gt; which map your projects code to the binaries in the Container. The &lt;em&gt;/app&lt;/em&gt; in reference in mine, relates to the &lt;em&gt;/app&lt;/em&gt; directory declared in the Dockerfile.&lt;/p&gt;

&lt;p&gt;The other important snippet is the &lt;code class=&quot;highlighter-rouge&quot;&gt;debuggerPath&lt;/code&gt; option. This is the directory where vsdbg has been installed within your Container. You can set different directories within your &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; command in the Dockerfile if you so wish.&lt;/p&gt;

&lt;p&gt;Lastly, note the Container name of &lt;code class=&quot;highlighter-rouge&quot;&gt;webapi_debug&lt;/code&gt;, I set this up in the relevant compose file.&lt;/p&gt;

&lt;p&gt;The below will live in a &lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode&lt;/code&gt; directory. If configured correctly you should get a nice launch icon:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/debug-vscode-docker.png&quot; alt=&quot;icon&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Attach to webapi (Docker)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;coreclr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;attach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sourceFileMap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}/src/api&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;processId&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${command:pickRemoteProcess}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pipeTransport&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debuggerPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/publish/vsdbg/vsdbg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pipeProgram&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;docker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pipeCwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}/src/api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;quoteArgs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pipeArgs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-i&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webapi_debug&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;composing&quot;&gt;Composing&lt;/h2&gt;

&lt;p&gt;Because I’m using separate Docker containers for &lt;em&gt;MongoDB&lt;/em&gt; and &lt;em&gt;Identity Server&lt;/em&gt; I use &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt; to knit together my containers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I’m planning on doing a Identity Server post next on my experiences in getting that set-up.&lt;/p&gt;

&lt;p&gt;The below is from my &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.dev.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;So the container with the interesting configurations is &lt;code class=&quot;highlighter-rouge&quot;&gt;webapi&lt;/code&gt; which is my ASP.NET Core Web API project.  As you can see I set the container name to &lt;code class=&quot;highlighter-rouge&quot;&gt;webapi_debug&lt;/code&gt; is set. As I mentioned before, the launch task needs that to remote into that particular container.&lt;/p&gt;

&lt;p&gt;You can also see I mount my Source Code directory from my &lt;strong&gt;host&lt;/strong&gt; Windows machine using &lt;code class=&quot;highlighter-rouge&quot;&gt;volumes&lt;/code&gt; using a relative path to my source code directory (&lt;em&gt;../api&lt;/em&gt;) to &lt;em&gt;:/app&lt;/em&gt;, allowing us, when a breakpoint is hit, for the code to be shown. If you configure this bit wrong, you will get the following error when the breakpoint is thrown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/not-found-debug.png&quot; alt=&quot;file-not-found&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The other interesting config points, are the &lt;strong&gt;ASPNETCORE_&lt;/strong&gt;* environment variables for &lt;code class=&quot;highlighter-rouge&quot;&gt;Development&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;buildconfig&lt;/code&gt; argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;, which as we learnt previously, is passed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and used.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;garfbradaz/serviceident:develop&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;identity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;buildconfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Debug&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../quickidentity&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../quickidentity:/app2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASPNETCORE_ENVIRONMENT=Development&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASPNETCORE_URLS=http://identity:5002&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AuthorityUrl=http://identity:5002&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5002:5002&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;webapi&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;garfbradaz/serviceapp:develop&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;webapi_debug&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;buildconfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Debug&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../api&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../api:/app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASPNETCORE_ENVIRONMENT=Development&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASPNETCORE_URLS=http://+:5001&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AuthorityUrl=http://identity:5002&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5001:5001&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;identity&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;27017:27017&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;running&quot;&gt;Running&lt;/h2&gt;

&lt;p&gt;So put this all together you can run your containers using the Compose:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose -f docker-compose.dev.yml up -d --build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Set a breakpoint in your code (Example I set in my Controller), and run your debug task in &lt;em&gt;Visual Studio Code&lt;/em&gt;. This will ask you to pick your process for your &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; code. Then when the breakpoint is hit,  you can inspect it as normal.&lt;/p&gt;

&lt;p&gt;I find that it can hang and take half a minute sometimes for the debug session to initiate, so bear with it.&lt;/p&gt;

&lt;p&gt;Anyway I hope this helps someone, and a massive thank you to &lt;a href=&quot;https://twitter.com/jchannon&quot;&gt;Jonathan&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/rbanks54&quot;&gt;Richard&lt;/a&gt;.&lt;/p&gt;</content><author><name>garfbradaz</name></author><category term="blog" /><category term="how-to" /><category term="dotnet-core" /><category term="beginners" /><summary type="html">Debugging ASP.NET Core in a Linux Docker with Visual Studio Code So, you have started using Docker for your .NET Core applications - awesome news. You are using Linux Containers, and Visual Studio Code, and you then go to Debug your container…..oh.</summary></entry><entry><title type="html">Setting Up Github Pages Jekyll And Using Windows Subsystem For Linux</title><link href="http://localhost:4000/blog/2018/12/12/Setting-up-Github-Pages-Jekyll-and-using-Windows-Subsystem-for-Linux.html" rel="alternate" type="text/html" title="Setting Up Github Pages Jekyll And Using Windows Subsystem For Linux" /><published>2018-12-12T00:00:00+00:00</published><updated>2018-12-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/2018/12/12/Setting-up-Github-Pages-Jekyll-and-using-Windows-Subsystem-for-Linux</id><content type="html" xml:base="http://localhost:4000/blog/2018/12/12/Setting-up-Github-Pages-Jekyll-and-using-Windows-Subsystem-for-Linux.html">&lt;h2 id=&quot;setting-up-github-pages-jekyll-and-using-windows-subsystem-for-linux&quot;&gt;Setting up Github Pages, Jekyll and using Windows Subsystem for Linux&lt;/h2&gt;

&lt;p&gt;The 1st &lt;em&gt;how to&lt;/em&gt; for setting up the blog and tools needed to edit it. I’m a Windows fan (I love my Surface devices), but I’m also starting to appreciate Linux &lt;!--more--&gt;, so this is a perfect opportunity to set up my Surface Book to use &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/faq&quot;&gt;Windows Subsystem for Linux&lt;/a&gt;, which allows you command line access to Linux. I’m assured this is not a virtual machine, but a &lt;a href=&quot;https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/&quot;&gt;syscall mapping between Windows and Linux itself&lt;/a&gt;, to actual Linux binaries themselves.&lt;/p&gt;

&lt;p&gt;I’m going to provide the instructions on how I set up &lt;em&gt;my&lt;/em&gt; Surface Book. You may want to tweak these to your needs.&lt;/p&gt;

&lt;p&gt;NB: I originally posted this blog post &lt;strong&gt;December 2018&lt;/strong&gt; so if anything has changed or doesn’t work, let me know.&lt;/p&gt;

&lt;h2 id=&quot;wsl-set-up&quot;&gt;WSL Set up&lt;/h2&gt;

&lt;p&gt;Windows Subsystem for linux needs setting up. If you have done this previously, then skip to &lt;a href=&quot;#visual-studio-code&quot;&gt;code instructions&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Use Powershell Windows Subsystem for Linux (WSL), make sure you Run as Administrator:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The prompt will ask you to restart your machine, so make sure you save anything before pressing &lt;strong&gt;Y&lt;/strong&gt;:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/release-notes_powershell.png&quot; alt=&quot;Powershell screen shot&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the Windows Store to install your favourite Linux Distro. I chose &lt;em&gt;Debian&lt;/em&gt;. More information &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10#windows-10-fall-creators-update-and-later-install-from-the-microsoft-store&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code&lt;/h2&gt;

&lt;p&gt;Again if you have installed this previously, then jump to &lt;a href=&quot;#install-jekyll-on-wsl&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m a great VSCode advocate, mainly from using .NET Core and C#. But I’m using TypeScript a little and using it more and more. I actually get a little sad face when I realise I need to use Visual Studio Enterprise for anything now (Usually because Razor support isn’t the best in Code, but improving).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I’m going to use Visual Studio Code to allow me to compose and edit markdown. Its the perfect editor because:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;The IDE is cross platform, so you can look after your blog within the IDE across any platform.&lt;/li&gt;
      &lt;li&gt;It has git out of the box.&lt;/li&gt;
      &lt;li&gt;Various Markdown extensions for extending the experience.&lt;/li&gt;
      &lt;li&gt;Markdown Preview, so you can view how your post will look.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;I will do a separate post on my Visual Code extension set up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download and install Code &lt;a href=&quot;https://code.visualstudio.com/download&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;install-jekyll-on-wsl&quot;&gt;Install Jekyll on WSL&lt;/h2&gt;

&lt;p&gt;As I mentioned previously, I installed Debian, so the instructions I’m giving are for Debian. More more information see &lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Firstly open a bash Window. I fired up Debian app I just installed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install dependencies for Ruby:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install ruby-full build-essential&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, I got the following error when I ran this on Debian:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Reading state information… Done
E: Unable to locate package ruby-full
E: Unable to locate package build-essential&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Essentially the &lt;em&gt;sources.lst&lt;/em&gt; is missing the &lt;em&gt;deb-src&lt;/em&gt; links to the repository.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/deb-src.png&quot; alt=&quot;deb-src&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nano /etc/apt/sources.list&lt;/code&gt; to edit the file and add the missing entries. Here is my file&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/deb-src-added.png&quot; alt=&quot;deb-src&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt update&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Re-run step 2. If this works, move on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the environment variables for gems for when bash is run interactively:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'# Install Ruby Gems to ~/gems'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
     &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export GEM_HOME=$HOME/gems'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
     &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=$HOME/gems/bin:$PATH'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
     &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Jekyll and bundler using &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll bundler&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Confirm you have &lt;em&gt;GCC&lt;/em&gt; and &lt;em&gt;Make&lt;/em&gt; available:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    gcc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
    g++ &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
    make &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h2 id=&quot;install-git-on-wsl&quot;&gt;Install Git on WSL&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may already have &lt;em&gt;Git for Windows&lt;/em&gt; set up on your Windows instance, but you will need to make sure Git is on WSL as well. Follow these instructions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install git:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install git&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To validate it has worked, run &lt;code class=&quot;highlighter-rouge&quot;&gt;git version&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set up standard email and username details:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;your@email.com&quot;&lt;/span&gt;
     git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;your username&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As described &lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_code_core_autocrlf_code&quot;&gt;here&lt;/a&gt;, need      to set your line endings correctly.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global core.autocrlf input&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-github-repository&quot;&gt;Create Github Repository&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There are different steps that need taking when creating your repository. Firstly the repository names needs to be a      specific format:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;your-github-username.github.io&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;You can find your username my navigating (top right) click Your &lt;em&gt;Avatar-&amp;gt;Your profile&lt;/em&gt;. Example mine is garfbradaz:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/me-github.png&quot; alt=&quot;me&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;So mine is &lt;em&gt;garfbradaz.github.io&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can select a Jekyll theme as well also. This is saved to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file in your repository. This can be       changed at a later date.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/theme-github.png&quot; alt=&quot;github options&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the site is published, your repository name is your URL for your new site:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://garfbradaz.github.io&quot;&gt;my site&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;update-github-with-generated-ssh-using-wsl&quot;&gt;Update Github with generated SSH using WSL&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Run the following in WSL bash terminal to generate a key, replacing the email with yours that you use for Github:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa -b 4096 -C  &amp;lt;your@githubemail.com&amp;gt;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Press &lt;strong&gt;Enter&lt;/strong&gt; to accept the default directory, and add a pass phrase.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the SSH private key to &lt;em&gt;ssh-agent&lt;/em&gt; so that you dont need to write the pass phrase each and every git commit:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-add ~/.ssh/id_rsa&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is using &lt;strong&gt;~&lt;/strong&gt; which is fine as we are within a Linux bash terminal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the following to Print tne RSA key to the screen. Then using your mouse, copy to clipboard:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to github in your browser of choice.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on &lt;strong&gt;Your profile&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on &lt;strong&gt;SSH and GPG keys&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on button &lt;strong&gt;New SSH Key&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give the key a meaningful title.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Paste RSA key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on &lt;strong&gt;Add RSA key&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;clone-the-site-to-wsl&quot;&gt;Clone the Site to WSL&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Firstly run &lt;em&gt;Visual Studio Code&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a Terminal within Visual Studio code. One option for doing that is &lt;strong&gt;Menu-&amp;gt;Terminal-&amp;gt;New Terminal&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then run bash.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Something important to note. After you run bash, you will be greeted with a directory prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;/mnt/c&lt;/code&gt;. This        means the drive is mounted and mapped to &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\&lt;/code&gt;. You can prove this by doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. Look at all those familiar Windows    files:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/windows-files-bash.png&quot; alt=&quot;WSL Bash Directory Listing&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~ &amp;amp;&amp;amp; pwd &lt;/code&gt; isn’t your traditional home directory, so dont place any files in here you want Windows to access. This &lt;strong&gt;DOES NOT&lt;/strong&gt; map to your Windows Home directory. If you edit this Linux Only Windows files, you will corrupt your Linux install.&lt;/p&gt;

    &lt;p&gt;Basically it is safe to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;/mnt/c&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With that in mind, navigate to the folder you wish to clone your Jekyll repository, here is an example for mine (You      do this in the same bash terminal you created in Visual Studio Code):&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd /mnt/c/code/blog&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This is the following Windows directory:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;C:\code\blog&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Git clone into this directory:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone &amp;lt;your-repository-url&amp;gt; .&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;And because you are within Visual Studio Code, the files will appear straight away:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/git-in-vscode.png&quot; alt=&quot;files appear in VSCode&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now create a file called &lt;em&gt;Gemfile&lt;/em&gt; and add the following (root of the directory):&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;source ‘https://rubygems.org’
gem ‘github-pages’, group: :jekyll_plugins&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/gem-in-vscode.png&quot; alt=&quot;files appear in VSCode&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;As you can see VSCode recognises up its a Gemfile and uses a nice Ruby icon.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now create the dependencies.  Within the bash terminal within Visual Studio code run:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; At this stage for Debian, I found there was an error installing &lt;strong&gt;nokogirl-1.8.5&lt;/strong&gt; dependencies.&lt;/p&gt;

    &lt;p&gt;I resolved this by running the following, then re-running &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install libpng-dev
 &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install &lt;span class=&quot;nt&quot;&gt;--reinstall&lt;/span&gt; zlibc zlib1g zlib1g-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;optional-modify-layout-of-theme&quot;&gt;(Optional) Modify Layout of Theme&lt;/h2&gt;

&lt;p&gt;If you want to amend the layout; add your own styles or navigation, then you need to check your themes repository for instructions on how to update (each may have different instructions).&lt;/p&gt;

&lt;p&gt;The URL scheme for the repositories is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/pages-themes/your-selected-theme&quot;&gt;https://github.com/pages-themes/your-selected-theme&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So mine is:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pages-themes/minimal&quot;&gt;https://github.com/pages-themes/minimal&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-_configyml&quot;&gt;Update _config.yml&lt;/h2&gt;

&lt;p&gt;Update your title and description for your blog.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; title: Gareth Bradleys Blog
&amp;gt; description: garfbradaz new blog, hosted on github. Rambling about coding, running and &amp;gt; any other of my ramblings.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;release-release-release&quot;&gt;Release, Release, Release&lt;/h2&gt;

&lt;p&gt;After you have proof read it and checked obviously. The beauty of Jekyll is you to &lt;strong&gt;publish&lt;/strong&gt; your blog, you just use the git skills you (may) already have, so run the following in bash while in your repository where your &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Start of life for my awesome blog - Arise!&quot;&lt;/span&gt;
git push origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;next-time&quot;&gt;Next time&lt;/h2&gt;

&lt;p&gt;I will talk about &lt;em&gt;How to Add Google analytics&lt;/em&gt; and &lt;em&gt;How to publish your first post&lt;/em&gt; all in Visual Studio Code.&lt;/p&gt;

&lt;p&gt;I haven’t written this blog post without help. I would like to shout out to the following blogs and documentation  for assisting me:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://daverupert.com/2018/04/developing-on-windows-with-wsl-and-visual-studio-code/&quot;&gt;Dave Rupert&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&quot;&gt;Github Docs - SSH&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/commandline/2016/11/17/do-not-change-linux-files-using-windows-apps-and-tools/&quot;&gt;Microsoft WSL Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/installation/ubuntu/&quot;&gt;Jekyll Docs - Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;Jekyll Docs&lt;/a&gt;&lt;/p&gt;</content><author><name>garfbradaz</name></author><category term="blog" /><category term="jekyll" /><category term="release-notes" /><category term="how-to" /><summary type="html">Setting up Github Pages, Jekyll and using Windows Subsystem for Linux The 1st how to for setting up the blog and tools needed to edit it. I’m a Windows fan (I love my Surface devices), but I’m also starting to appreciate Linux</summary></entry><entry><title type="html">Arise New Blog</title><link href="http://localhost:4000/blog/2018/12/07/Arise-New-Blog.html" rel="alternate" type="text/html" title="Arise New Blog" /><published>2018-12-07T00:00:00+00:00</published><updated>2018-12-07T00:00:00+00:00</updated><id>http://localhost:4000/blog/2018/12/07/Arise-New-Blog</id><content type="html" xml:base="http://localhost:4000/blog/2018/12/07/Arise-New-Blog.html">&lt;h2 id=&quot;its-alive&quot;&gt;It’s alive!&lt;/h2&gt;

&lt;p&gt;I have wanted to move &lt;a href=&quot;https://mywebanecdotes.com/&quot;&gt;my current&lt;/a&gt; off Wordpress for sometime, &lt;!--more--&gt;, but time has always been a factor. As a developer I find myself living within &lt;em&gt;Visual Studio Code&lt;/em&gt;, so I decided to set up a blog which can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use my Visual Studio Code&lt;/li&gt;
  &lt;li&gt;Use my git skills&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I knew github has &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;, and it used &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. So I have started a Github page. So this is day one. I chose a minimal theme  for the site, and each change to the site I will document as a blog post. Think of them as Release Notes!&lt;/p&gt;

&lt;p&gt;As I move on I change the style and layout etc, but for now (and posterity) here is the Home Page from day 1:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/day_1.PNG&quot; alt=&quot;Day 1&quot; /&gt;&lt;/p&gt;</content><author><name>garfbradaz</name></author><category term="blog" /><category term="misc" /><category term="jekyll" /><summary type="html">It’s alive! I have wanted to move my current off Wordpress for sometime,</summary></entry></feed>