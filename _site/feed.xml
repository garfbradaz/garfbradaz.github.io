<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://garfbradaz.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://garfbradaz.github.io/" rel="alternate" type="text/html" /><updated>2018-12-18T08:43:45+00:00</updated><id>https://garfbradaz.github.io/feed.xml</id><title type="html">Gareth Bradleys Blog</title><subtitle>garfbradaz new blog, hosted on github. Rambling about coding, running and any other of my ramblings.</subtitle><entry><title type="html">Episode 1 Json Api Dotnet Core Docker</title><link href="https://garfbradaz.github.io/blog/2018/12/18/Episode-1-json-api-dotnet-core-docker.html" rel="alternate" type="text/html" title="Episode 1 Json Api Dotnet Core Docker" /><published>2018-12-18T00:00:00+00:00</published><updated>2018-12-18T00:00:00+00:00</updated><id>https://garfbradaz.github.io/blog/2018/12/18/Episode-1-json-api-dotnet-core-docker</id><content type="html" xml:base="https://garfbradaz.github.io/blog/2018/12/18/Episode-1-json-api-dotnet-core-docker.html">&lt;h2 id=&quot;inspiration&quot;&gt;Inspiration&lt;/h2&gt;

&lt;p&gt;There is a series on &lt;a href=&quot;https://dev.o&quot;&gt;dev.to&lt;/a&gt; that I have followed by &lt;a href=&quot;https://dev.to/nathanabland&quot;&gt;Nathan Bland&lt;/a&gt; who has recorded as series of videos around creating a JSON API, using &lt;em&gt;Node.js&lt;/em&gt;, &lt;em&gt;docker&lt;/em&gt; and &lt;em&gt;Express&lt;/em&gt;. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;I liked the idea around this, so I’m going to do the same, but in a blog style, but replacing &lt;em&gt;Node.js&lt;/em&gt; and &lt;em&gt;Express&lt;/em&gt; with &lt;em&gt;ASP.NET Core WebAPI&lt;/em&gt;. I also want to use a MongoDB as a the backend.&lt;/p&gt;

&lt;h2 id=&quot;set-the-scene&quot;&gt;Set the Scene&lt;/h2&gt;

&lt;p&gt;The API itself will be for a &lt;em&gt;Book Shop Chain&lt;/em&gt; who want to expose their stores and titles via a public RESTful service for other companies to use. This can be used for stock lookups and to see which stores have stock available to sell.&lt;/p&gt;

&lt;p&gt;Here are some example Epics to show the shape of the API needed:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a &lt;em&gt;book store&lt;/em&gt;
I can &lt;em&gt;add&lt;/em&gt; our &lt;em&gt;store&lt;/em&gt; to the database
&lt;em&gt;So&lt;/em&gt; we can be accessible&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a &lt;em&gt;book store&lt;/em&gt;
I can &lt;em&gt;add&lt;/em&gt; our &lt;em&gt;inventory&lt;/em&gt; to our database
&lt;em&gt;So&lt;/em&gt; we can expose our inventory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a &lt;em&gt;book store&lt;/em&gt;
We can &lt;em&gt;update&lt;/em&gt; a books stock level
&lt;em&gt;For&lt;/em&gt; an accurate stock level&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a &lt;em&gt;API consumer&lt;/em&gt;
I can look up a &lt;em&gt;stores address&lt;/em&gt;
&lt;em&gt;So&lt;/em&gt; we know where to buy a &lt;em&gt;book&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a &lt;em&gt;API consumer&lt;/em&gt;
I can look up a &lt;em&gt;book&lt;/em&gt;
&lt;em&gt;So&lt;/em&gt; we can get a &lt;em&gt;list&lt;/em&gt; of &lt;em&gt;stores&lt;/em&gt; who sell a
&lt;em&gt;book&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As &lt;em&gt;book store IT Security&lt;/em&gt;
We can add &lt;em&gt;API Keys&lt;/em&gt; to the API
&lt;em&gt;For&lt;/em&gt; API Consumers to use when querying the API&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-to-expect&quot;&gt;What to expect&lt;/h2&gt;

&lt;p&gt;My plan is to release weekly blog posts covering in a similar fashion like Nathan’s:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setting up your .NET Core Project Structure.&lt;/li&gt;
  &lt;li&gt;Setting up docker environment using docker-compose.&lt;/li&gt;
  &lt;li&gt;Modelling API JSON back end using Mongo.&lt;/li&gt;
  &lt;li&gt;Modelling API using Swagger.&lt;/li&gt;
  &lt;li&gt;Unit Tests with Xunit.&lt;/li&gt;
  &lt;li&gt;Integration Tests with Postman.&lt;/li&gt;
  &lt;li&gt;Skeleton Book Store API (Routes etc).&lt;/li&gt;
  &lt;li&gt;Skeleton Inventory API (Routes etc).&lt;/li&gt;
  &lt;li&gt;Securing your API.&lt;/li&gt;
  &lt;li&gt;Data validation.&lt;/li&gt;
  &lt;li&gt;Pagination for large data queries.&lt;/li&gt;
  &lt;li&gt;Filter and Search.&lt;/li&gt;
  &lt;li&gt;Hooking up to Azure Dev Ops for Build and Release Pipeline.&lt;/li&gt;
  &lt;li&gt;Publisher Swagger Documentation on Github.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will post any code on Github as well.&lt;/p&gt;

&lt;h2 id=&quot;start-at-zero&quot;&gt;Start at Zero&lt;/h2&gt;

&lt;p&gt;So before starting cracking on with this, make sure your environment is set up. Because this is &lt;em&gt;.NET Core&lt;/em&gt;, this is cross platform, so if you own a Mac or Linux box, feel free to join in. I’m going to be building this on a &lt;em&gt;Surface Book&lt;/em&gt;, but I will try to be a good Xpat-Citizen and test across environments.&lt;/p&gt;

&lt;p&gt;Please make sure the following is installed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dotnet.microsoft.com/download&quot;&gt;Dotnet Core &lt;/a&gt; - I’m currently using 2.2.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/get-started&quot;&gt;Docker&lt;/a&gt; - You will need to also create a login for &lt;a href=&quot;https://hub.docker.com/signup&quot;&gt;Docker Hub&lt;/a&gt; if you do not have one.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-gb/powershell/scripting/overview?view=powershell-6&quot;&gt;Powershell Core&lt;/a&gt; - PowerShell Core is cross-platform and runs on Windows, Linux, and MacOS while the old one runs on Windows only(CLI). There are options to install on the OS of choice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We wont need to install Mongo as we will be running it using &lt;em&gt;Docker&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ide&quot;&gt;IDE&lt;/h2&gt;

&lt;p&gt;I will be using &lt;em&gt;Visual Studio Code&lt;/em&gt; for cross platform .NET Core support. I use a bunch of extension which I have put here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/garfbradaz/be010080df076d19892bf4ec71127b53&quot;&gt;https://gist.github.com/garfbradaz/be010080df076d19892bf4ec71127b53&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can import these using the following &lt;em&gt;Settings Sync&lt;/em&gt; extension on the marketplace:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync&quot;&gt;https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you already use &lt;em&gt;VSCode&lt;/em&gt;, you may just want to find the &lt;em&gt;C#&lt;/em&gt;, &lt;em&gt;Docker&lt;/em&gt; &lt;em&gt;GitLens&lt;/em&gt; and &lt;em&gt;.NET Core Test Explorer&lt;/em&gt; &lt;a href=&quot;https://code.visualstudio.com/docs/editor/extension-gallery&quot;&gt;extensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;My list contains extensions like &lt;em&gt;Jekyll&lt;/em&gt; support which you wont need for this.&lt;/p&gt;

&lt;h2 id=&quot;next-time&quot;&gt;Next time&lt;/h2&gt;

&lt;p&gt;We will create the &lt;em&gt;ASP.NET Core WebAPI&lt;/em&gt; template, set up the project structure. Join me next time!.&lt;/p&gt;</content><author><name>gareth</name></author><category term="blog" /><category term="how-to" /><category term="dotnet-core" /><category term="beginners" /><category term="api" /><summary type="html">Inspiration There is a series on dev.to that I have followed by Nathan Bland who has recorded as series of videos around creating a JSON API, using Node.js, docker and Express.</summary></entry><entry><title type="html">Debug Dotnet Core In Docker</title><link href="https://garfbradaz.github.io/blog/2018/12/13/debug-dotnet-core-in-docker.html" rel="alternate" type="text/html" title="Debug Dotnet Core In Docker" /><published>2018-12-13T00:00:00+00:00</published><updated>2018-12-13T00:00:00+00:00</updated><id>https://garfbradaz.github.io/blog/2018/12/13/debug-dotnet-core-in-docker</id><content type="html" xml:base="https://garfbradaz.github.io/blog/2018/12/13/debug-dotnet-core-in-docker.html">&lt;h2 id=&quot;debugging-aspnet-core-in-a-linux-docker-with-visual-studio-code&quot;&gt;Debugging ASP.NET Core in a Linux Docker with Visual Studio Code&lt;/h2&gt;

&lt;p&gt;So, you have started using Docker for your .NET Core applications - awesome news. You are using Linux Containers, and Visual Studio Code, and you then go to Debug your container…..oh. &lt;!--more--&gt; (I’m using Windows).&lt;/p&gt;

&lt;p&gt;Its not the most straight forward process I have found, if you are looking at getting this up and running. Firstly I didn’t figure this out on my own, the reason I’m blogging about it is because I meshed together the knowledge I had, plus these very informative posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jonathanchannon.com/2017/06/07/debugging-netcore-docker/&quot;&gt;Jonathan Channon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.richard-banks.org/2018/07/debugging-core-in-docker.html&quot;&gt;Richard Banks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was the above two posts that glued it together for me.  Have a good read of those as well. Before we go any further, just to confirm these instructions are for &lt;em&gt;Visual Studio Code&lt;/em&gt; and &lt;em&gt;Linux Containers&lt;/em&gt; using &lt;em&gt;Docker Compose&lt;/em&gt;, I’m not sure how this is set-up on Visual Studio. I’m presuming you have &lt;em&gt;VSCode&lt;/em&gt;, &lt;em&gt;Docker&lt;/em&gt; and &lt;em&gt;.NET Core SDK&lt;/em&gt; installed. And you are using Linux Containers.&lt;/p&gt;

&lt;h2 id=&quot;dockerfile&quot;&gt;DockerFile&lt;/h2&gt;

&lt;p&gt;Firstly lets look at my multi-staged (Multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;) Dockerfile for building my project.&lt;/p&gt;

&lt;h3 id=&quot;1st-stage-build&quot;&gt;1st Stage Build&lt;/h3&gt;

&lt;p&gt;The first part of the Dockerfile &lt;code class=&quot;highlighter-rouge&quot;&gt;build-env&lt;/code&gt; stage, takes an &lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;buildconfig&lt;/code&gt;, which controls how the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet publish&lt;/code&gt; is configured. And yes I know, I have a todo item to refactor the if/else to just pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;buildconfig&lt;/code&gt; as a &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; value.&lt;/p&gt;

&lt;h3 id=&quot;2nd-stage-run&quot;&gt;2nd Stage Run&lt;/h3&gt;

&lt;p&gt;So the 1st stage handled the build, the 2nd handles the running of the Web API project. As you can see, there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt; switch again, to install some dependencies when running in &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;. Ignore the &lt;strong&gt;mongo&lt;/strong&gt; installs, it is the &lt;em&gt;vsdbg&lt;/em&gt; installation We are interested in.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl -sSL https://aka.ms/getvsdbgsh | bash /dev/stdin -v latest -l&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;The debugger platform has been expanded between Visual Studio 2017 15.3 and
previous versions of Visual Studio. Visual Studio can now communicate using
the debug adapter protocol which is used by Visual Studio, Visual Studio Code
and Visual Studio for Mac. This protocol is now used for debugging
cross-platform .NET Core applications.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/MIEngine/wiki/Offroad-Debugging-of-.NET-Core-on-Linux---OSX-from-Visual-Studio&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So vsdbg is installed &lt;strong&gt;into&lt;/strong&gt; the container to allow remote debugging from your host machine using Visual Studio Code.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;FROM microsoft/dotnet:2.2-sdk AS build-env&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ARG buildconfig&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;WORKDIR /app&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY ServiceApp.WebApi.csproj .&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN dotnet restore&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY . .&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN if [ &quot;${buildconfig}&quot; = &quot;Debug&quot; ]; then \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;dotnet publish -o /publish -c Debug; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;else \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;dotnet publish -o /publish -c Release; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;FROM microsoft/dotnet:2.2-aspnetcore-runtime&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ARG buildconfig&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENV DEBIAN_FRONTEND noninteractive&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;WORKDIR /publish&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY --from=build-env /publish .&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN if [ &quot;${buildconfig}&quot; = &quot;Debug&quot; ]; then \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;apt-get update &amp;amp;&amp;amp; \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;apt-get install -y --no-install-recommends apt-utils &amp;amp;&amp;amp; \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;apt-get install curl unzip procps mongodb -y &amp;amp;&amp;amp; \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;curl -sSL https://aka.ms/getvsdbgsh | bash /dev/stdin -v latest -l /publish/vsdbg; \&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;else \&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;echo &quot;*Whistling*&quot;; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENV DEBIAN_FRONTEND teletype&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENTRYPOINT [ &quot;dotnet&quot;,&quot;ServiceApp.WebApi.dll&quot; ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;launch-task-configuration-for-visual-studio-code&quot;&gt;Launch Task Configuration for Visual Studio Code&lt;/h2&gt;

&lt;p&gt;So this was the bit I struggled with, to the point I &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-vscode/issues/2724&quot;&gt;logged a Github Issue&lt;/a&gt; and subsequently had a light bulb moment afterwards!&lt;/p&gt;

&lt;p&gt;Both Jonathan and Richards work and investigations for their posts, again helped tenfold.&lt;/p&gt;

&lt;p&gt;Important bits are the &lt;code class=&quot;highlighter-rouge&quot;&gt;sourceFileMap&lt;/code&gt; which map your projects code to the binaries in the Container. The &lt;em&gt;/app&lt;/em&gt; in reference in mine, relates to the &lt;em&gt;/app&lt;/em&gt; directory declared in the Dockerfile.&lt;/p&gt;

&lt;p&gt;The other important snippet is the &lt;code class=&quot;highlighter-rouge&quot;&gt;debuggerPath&lt;/code&gt; option. This is the directory where vsdbg has been installed within your Container. You can set different directories within your &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; command in the Dockerfile if you so wish.&lt;/p&gt;

&lt;p&gt;Lastly, note the Container name of &lt;code class=&quot;highlighter-rouge&quot;&gt;webapi_debug&lt;/code&gt;, I set this up in the relevant compose file.&lt;/p&gt;

&lt;p&gt;The below will live in a &lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode&lt;/code&gt; directory. If configured correctly you should get a nice launch icon:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/debug-vscode-docker.png&quot; alt=&quot;icon&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Attach to webapi (Docker)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;coreclr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;attach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sourceFileMap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}/src/api&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;processId&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${command:pickRemoteProcess}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pipeTransport&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debuggerPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/publish/vsdbg/vsdbg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pipeProgram&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;docker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pipeCwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}/src/api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;quoteArgs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pipeArgs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-i&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webapi_debug&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;composing&quot;&gt;Composing&lt;/h2&gt;

&lt;p&gt;Because I’m using separate Docker containers for &lt;em&gt;MongoDB&lt;/em&gt; and &lt;em&gt;Identity Server&lt;/em&gt; I use &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt; to knit together my containers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I’m planning on doing a Identity Server post next on my experiences in getting that set-up.&lt;/p&gt;

&lt;p&gt;The below is from my &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.dev.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;So the container with the interesting configurations is &lt;code class=&quot;highlighter-rouge&quot;&gt;webapi&lt;/code&gt; which is my ASP.NET Core Web API project.  As you can see I set the container name to &lt;code class=&quot;highlighter-rouge&quot;&gt;webapi_debug&lt;/code&gt; is set. As I mentioned before, the launch task needs that to remote into that particular container.&lt;/p&gt;

&lt;p&gt;You can also see I mount my Source Code directory from my &lt;strong&gt;host&lt;/strong&gt; Windows machine using &lt;code class=&quot;highlighter-rouge&quot;&gt;volumes&lt;/code&gt; using a relative path to my source code directory (&lt;em&gt;../api&lt;/em&gt;) to &lt;em&gt;:/app&lt;/em&gt;, allowing us, when a breakpoint is hit, for the code to be shown. If you configure this bit wrong, you will get the following error when the breakpoint is thrown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/not-found-debug.png&quot; alt=&quot;file-not-found&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The other interesting config points, are the &lt;strong&gt;ASPNETCORE_&lt;/strong&gt;* environment variables for &lt;code class=&quot;highlighter-rouge&quot;&gt;Development&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;buildconfig&lt;/code&gt; argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;, which as we learnt previously, is passed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and used.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;garfbradaz/serviceident:develop&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;identity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;buildconfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Debug&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../quickidentity&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../quickidentity:/app2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASPNETCORE_ENVIRONMENT=Development&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASPNETCORE_URLS=http://identity:5002&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AuthorityUrl=http://identity:5002&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5002:5002&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;webapi&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;garfbradaz/serviceapp:develop&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;webapi_debug&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;buildconfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Debug&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../api&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;../api:/app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASPNETCORE_ENVIRONMENT=Development&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASPNETCORE_URLS=http://+:5001&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;AuthorityUrl=http://identity:5002&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5001:5001&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;identity&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;27017:27017&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;running&quot;&gt;Running&lt;/h2&gt;

&lt;p&gt;So put this all together you can run your containers using the Compose:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose -f docker-compose.dev.yml up -d --build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Set a breakpoint in your code (Example I set in my Controller), and run your debug task in &lt;em&gt;Visual Studio Code&lt;/em&gt;. This will ask you to pick your process for your &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt; code. Then when the breakpoint is hit,  you can inspect it as normal.&lt;/p&gt;

&lt;p&gt;I find that it can hang and take half a minute sometimes for the debug session to initiate, so bear with it.&lt;/p&gt;

&lt;p&gt;Anyway I hope this helps someone, and a massive thank you to &lt;a href=&quot;https://twitter.com/jchannon&quot;&gt;Jonathan&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/rbanks54&quot;&gt;Richard&lt;/a&gt;.&lt;/p&gt;</content><author><name>gareth</name></author><category term="blog" /><category term="how-to" /><category term="dotnet-core" /><category term="beginners" /><summary type="html">Debugging ASP.NET Core in a Linux Docker with Visual Studio Code So, you have started using Docker for your .NET Core applications - awesome news. You are using Linux Containers, and Visual Studio Code, and you then go to Debug your container…..oh.</summary></entry><entry><title type="html">Setting Up Github Pages Jekyll And Using Windows Subsystem For Linux</title><link href="https://garfbradaz.github.io/blog/2018/12/12/Setting-up-Github-Pages-Jekyll-and-using-Windows-Subsystem-for-Linux.html" rel="alternate" type="text/html" title="Setting Up Github Pages Jekyll And Using Windows Subsystem For Linux" /><published>2018-12-12T00:00:00+00:00</published><updated>2018-12-12T00:00:00+00:00</updated><id>https://garfbradaz.github.io/blog/2018/12/12/Setting-up-Github-Pages-Jekyll-and-using-Windows-Subsystem-for-Linux</id><content type="html" xml:base="https://garfbradaz.github.io/blog/2018/12/12/Setting-up-Github-Pages-Jekyll-and-using-Windows-Subsystem-for-Linux.html">&lt;h2 id=&quot;setting-up-github-pages-jekyll-and-using-windows-subsystem-for-linux&quot;&gt;Setting up Github Pages, Jekyll and using Windows Subsystem for Linux&lt;/h2&gt;

&lt;p&gt;The 1st &lt;em&gt;how to&lt;/em&gt; for setting up the blog and tools needed to edit it. I’m a Windows fan (I love my Surface devices), but I’m also starting to appreciate Linux &lt;!--more--&gt;, so this is a perfect opportunity to set up my Surface Book to use &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/faq&quot;&gt;Windows Subsystem for Linux&lt;/a&gt;, which allows you command line access to Linux. I’m assured this is not a virtual machine, but a &lt;a href=&quot;https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/&quot;&gt;syscall mapping between Windows and Linux itself&lt;/a&gt;, to actual Linux binaries themselves.&lt;/p&gt;

&lt;p&gt;I’m going to provide the instructions on how I set up &lt;em&gt;my&lt;/em&gt; Surface Book. You may want to tweak these to your needs.&lt;/p&gt;

&lt;p&gt;NB: I originally posted this blog post &lt;strong&gt;December 2018&lt;/strong&gt; so if anything has changed or doesn’t work, let me know.&lt;/p&gt;

&lt;h2 id=&quot;wsl-set-up&quot;&gt;WSL Set up&lt;/h2&gt;

&lt;p&gt;Windows Subsystem for linux needs setting up. If you have done this previously, then skip to &lt;a href=&quot;#visual-studio-code&quot;&gt;code instructions&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Use Powershell Windows Subsystem for Linux (WSL), make sure you Run as Administrator:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The prompt will ask you to restart your machine, so make sure you save anything before pressing &lt;strong&gt;Y&lt;/strong&gt;:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/release-notes_powershell.png&quot; alt=&quot;Powershell screen shot&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the Windows Store to install your favourite Linux Distro. I chose &lt;em&gt;Debian&lt;/em&gt;. More information &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10#windows-10-fall-creators-update-and-later-install-from-the-microsoft-store&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code&lt;/h2&gt;

&lt;p&gt;Again if you have installed this previously, then jump to &lt;a href=&quot;#install-jekyll-on-wsl&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m a great VSCode advocate, mainly from using .NET Core and C#. But I’m using TypeScript a little and using it more and more. I actually get a little sad face when I realise I need to use Visual Studio Enterprise for anything now (Usually because Razor support isn’t the best in Code, but improving).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I’m going to use Visual Studio Code to allow me to compose and edit markdown. Its the perfect editor because:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;The IDE is cross platform, so you can look after your blog within the IDE across any platform.&lt;/li&gt;
      &lt;li&gt;It has git out of the box.&lt;/li&gt;
      &lt;li&gt;Various Markdown extensions for extending the experience.&lt;/li&gt;
      &lt;li&gt;Markdown Preview, so you can view how your post will look.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;I will do a separate post on my Visual Code extension set up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download and install Code &lt;a href=&quot;https://code.visualstudio.com/download&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;install-jekyll-on-wsl&quot;&gt;Install Jekyll on WSL&lt;/h2&gt;

&lt;p&gt;As I mentioned previously, I installed Debian, so the instructions I’m giving are for Debian. More more information see &lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Firstly open a bash Window. I fired up Debian app I just installed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install dependencies for Ruby:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install ruby-full build-essential&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, I got the following error when I ran this on Debian:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Reading state information… Done
E: Unable to locate package ruby-full
E: Unable to locate package build-essential&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Essentially the &lt;em&gt;sources.lst&lt;/em&gt; is missing the &lt;em&gt;deb-src&lt;/em&gt; links to the repository.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/deb-src.png&quot; alt=&quot;deb-src&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nano /etc/apt/sources.list&lt;/code&gt; to edit the file and add the missing entries. Here is my file&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/deb-src-added.png&quot; alt=&quot;deb-src&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt update&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Re-run step 2. If this works, move on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the environment variables for gems for when bash is run interactively:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'# Install Ruby Gems to ~/gems'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
     &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export GEM_HOME=$HOME/gems'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
     &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=$HOME/gems/bin:$PATH'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
     &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Jekyll and bundler using &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll bundler&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Confirm you have &lt;em&gt;GCC&lt;/em&gt; and &lt;em&gt;Make&lt;/em&gt; available:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    gcc &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
    g++ &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
    make &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h2 id=&quot;install-git-on-wsl&quot;&gt;Install Git on WSL&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may already have &lt;em&gt;Git for Windows&lt;/em&gt; set up on your Windows instance, but you will need to make sure Git is on WSL as well. Follow these instructions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install git:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install git&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To validate it has worked, run &lt;code class=&quot;highlighter-rouge&quot;&gt;git version&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set up standard email and username details:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;your@email.com&quot;&lt;/span&gt;
     git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;your username&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As described &lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_code_core_autocrlf_code&quot;&gt;here&lt;/a&gt;, need      to set your line endings correctly.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global core.autocrlf input&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-github-repository&quot;&gt;Create Github Repository&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There are different steps that need taking when creating your repository. Firstly the repository names needs to be a      specific format:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;your-github-username.github.io&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;You can find your username my navigating (top right) click Your &lt;em&gt;Avatar-&amp;gt;Your profile&lt;/em&gt;. Example mine is garfbradaz:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/me-github.png&quot; alt=&quot;me&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;So mine is &lt;em&gt;garfbradaz.github.io&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can select a Jekyll theme as well also. This is saved to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file in your repository. This can be       changed at a later date.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/theme-github.png&quot; alt=&quot;github options&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the site is published, your repository name is your URL for your new site:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://garfbradaz.github.io&quot;&gt;my site&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;update-github-with-generated-ssh-using-wsl&quot;&gt;Update Github with generated SSH using WSL&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Run the following in WSL bash terminal to generate a key, replacing the email with yours that you use for Github:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa -b 4096 -C  &amp;lt;your@githubemail.com&amp;gt;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Press &lt;strong&gt;Enter&lt;/strong&gt; to accept the default directory, and add a pass phrase.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the SSH private key to &lt;em&gt;ssh-agent&lt;/em&gt; so that you dont need to write the pass phrase each and every git commit:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-add ~/.ssh/id_rsa&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is using &lt;strong&gt;~&lt;/strong&gt; which is fine as we are within a Linux bash terminal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the following to Print tne RSA key to the screen. Then using your mouse, copy to clipboard:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to github in your browser of choice.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on &lt;strong&gt;Your profile&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on &lt;strong&gt;SSH and GPG keys&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on button &lt;strong&gt;New SSH Key&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give the key a meaningful title.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Paste RSA key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click on &lt;strong&gt;Add RSA key&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;clone-the-site-to-wsl&quot;&gt;Clone the Site to WSL&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Firstly run &lt;em&gt;Visual Studio Code&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a Terminal within Visual Studio code. One option for doing that is &lt;strong&gt;Menu-&amp;gt;Terminal-&amp;gt;New Terminal&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then run bash.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Something important to note. After you run bash, you will be greeted with a directory prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;/mnt/c&lt;/code&gt;. This        means the drive is mounted and mapped to &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\&lt;/code&gt;. You can prove this by doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. Look at all those familiar Windows    files:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/windows-files-bash.png&quot; alt=&quot;WSL Bash Directory Listing&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~ &amp;amp;&amp;amp; pwd &lt;/code&gt; isn’t your traditional home directory, so dont place any files in here you want Windows to access. This &lt;strong&gt;DOES NOT&lt;/strong&gt; map to your Windows Home directory. If you edit this Linux Only Windows files, you will corrupt your Linux install.&lt;/p&gt;

    &lt;p&gt;Basically it is safe to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;/mnt/c&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With that in mind, navigate to the folder you wish to clone your Jekyll repository, here is an example for mine (You      do this in the same bash terminal you created in Visual Studio Code):&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd /mnt/c/code/blog&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;This is the following Windows directory:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;C:\code\blog&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Git clone into this directory:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone &amp;lt;your-repository-url&amp;gt; .&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;And because you are within Visual Studio Code, the files will appear straight away:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/git-in-vscode.png&quot; alt=&quot;files appear in VSCode&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now create a file called &lt;em&gt;Gemfile&lt;/em&gt; and add the following (root of the directory):&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;source ‘https://rubygems.org’
gem ‘github-pages’, group: :jekyll_plugins&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/posts/gem-in-vscode.png&quot; alt=&quot;files appear in VSCode&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;As you can see VSCode recognises up its a Gemfile and uses a nice Ruby icon.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now create the dependencies.  Within the bash terminal within Visual Studio code run:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; At this stage for Debian, I found there was an error installing &lt;strong&gt;nokogirl-1.8.5&lt;/strong&gt; dependencies.&lt;/p&gt;

    &lt;p&gt;I resolved this by running the following, then re-running &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install libpng-dev
 &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install &lt;span class=&quot;nt&quot;&gt;--reinstall&lt;/span&gt; zlibc zlib1g zlib1g-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;optional-modify-layout-of-theme&quot;&gt;(Optional) Modify Layout of Theme&lt;/h2&gt;

&lt;p&gt;If you want to amend the layout; add your own styles or navigation, then you need to check your themes repository for instructions on how to update (each may have different instructions).&lt;/p&gt;

&lt;p&gt;The URL scheme for the repositories is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/pages-themes/your-selected-theme&quot;&gt;https://github.com/pages-themes/your-selected-theme&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So mine is:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pages-themes/minimal&quot;&gt;https://github.com/pages-themes/minimal&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-_configyml&quot;&gt;Update _config.yml&lt;/h2&gt;

&lt;p&gt;Update your title and description for your blog.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; title: Gareth Bradleys Blog
&amp;gt; description: garfbradaz new blog, hosted on github. Rambling about coding, running and &amp;gt; any other of my ramblings.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;release-release-release&quot;&gt;Release, Release, Release&lt;/h2&gt;

&lt;p&gt;After you have proof read it and checked obviously. The beauty of Jekyll is you to &lt;strong&gt;publish&lt;/strong&gt; your blog, you just use the git skills you (may) already have, so run the following in bash while in your repository where your &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Start of life for my awesome blog - Arise!&quot;&lt;/span&gt;
git push origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;next-time&quot;&gt;Next time&lt;/h2&gt;

&lt;p&gt;I will talk about &lt;em&gt;How to Add Google analytics&lt;/em&gt; and &lt;em&gt;How to publish your first post&lt;/em&gt; all in Visual Studio Code.&lt;/p&gt;

&lt;p&gt;I haven’t written this blog post without help. I would like to shout out to the following blogs and documentation  for assisting me:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://daverupert.com/2018/04/developing-on-windows-with-wsl-and-visual-studio-code/&quot;&gt;Dave Rupert&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&quot;&gt;Github Docs - SSH&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/commandline/2016/11/17/do-not-change-linux-files-using-windows-apps-and-tools/&quot;&gt;Microsoft WSL Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/installation/ubuntu/&quot;&gt;Jekyll Docs - Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;Jekyll Docs&lt;/a&gt;&lt;/p&gt;</content><author><name>gareth</name></author><category term="blog" /><category term="jekyll" /><category term="release-notes" /><category term="how-to" /><summary type="html">Setting up Github Pages, Jekyll and using Windows Subsystem for Linux The 1st how to for setting up the blog and tools needed to edit it. I’m a Windows fan (I love my Surface devices), but I’m also starting to appreciate Linux</summary></entry><entry><title type="html">Arise New Blog</title><link href="https://garfbradaz.github.io/blog/2018/12/07/Arise-New-Blog.html" rel="alternate" type="text/html" title="Arise New Blog" /><published>2018-12-07T00:00:00+00:00</published><updated>2018-12-07T00:00:00+00:00</updated><id>https://garfbradaz.github.io/blog/2018/12/07/Arise-New-Blog</id><content type="html" xml:base="https://garfbradaz.github.io/blog/2018/12/07/Arise-New-Blog.html">&lt;h2 id=&quot;its-alive&quot;&gt;It’s alive!&lt;/h2&gt;

&lt;p&gt;I have wanted to move &lt;a href=&quot;https://mywebanecdotes.com/&quot;&gt;my current&lt;/a&gt; off Wordpress for sometime, &lt;!--more--&gt;, but time has always been a factor. As a developer I find myself living within &lt;em&gt;Visual Studio Code&lt;/em&gt;, so I decided to set up a blog which can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use my Visual Studio Code&lt;/li&gt;
  &lt;li&gt;Use my git skills&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I knew github has &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;, and it used &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. So I have started a Github page. So this is day one. I chose a minimal theme  for the site, and each change to the site I will document as a blog post. Think of them as Release Notes!&lt;/p&gt;

&lt;p&gt;As I move on I change the style and layout etc, but for now (and posterity) here is the Home Page from day 1:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/day_1.PNG&quot; alt=&quot;Day 1&quot; /&gt;&lt;/p&gt;</content><author><name>gareth</name></author><category term="blog" /><category term="misc" /><category term="jekyll" /><summary type="html">It’s alive! I have wanted to move my current off Wordpress for sometime,</summary></entry></feed>